/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.practical.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.practical.model.Category;
import com.liferay.practical.model.CategoryModel;
import com.liferay.practical.model.CategorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Category service. Represents a row in the &quot;Category&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.practical.model.CategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CategoryImpl}.
 * </p>
 *
 * @author saifulla
 * @see CategoryImpl
 * @see com.liferay.practical.model.Category
 * @see com.liferay.practical.model.CategoryModel
 * @generated
 */
@JSON(strict = true)
public class CategoryModelImpl extends BaseModelImpl<Category>
	implements CategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a category model instance should use the {@link com.liferay.practical.model.Category} interface instead.
	 */
	public static final String TABLE_NAME = "Category";
	public static final Object[][] TABLE_COLUMNS = {
			{ "categoryid", Types.BIGINT },
			{ "categoryname", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Category (categoryid LONG not null primary key,categoryname VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Category";
	public static final String ORDER_BY_JPQL = " ORDER BY category.categoryid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Category.categoryid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.practical.model.Category"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.practical.model.Category"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Category toModel(CategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Category model = new CategoryImpl();

		model.setCategoryid(soapModel.getCategoryid());
		model.setCategoryname(soapModel.getCategoryname());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Category> toModels(CategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Category> models = new ArrayList<Category>(soapModels.length);

		for (CategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_ORDERS_CATEGORY_NAME = "Orders_Category";
	public static final Object[][] MAPPING_TABLE_ORDERS_CATEGORY_COLUMNS = {
			{ "categoryid", Types.BIGINT },
			{ "orderid", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_ORDERS_CATEGORY_SQL_CREATE = "create table Orders_Category (categoryid LONG not null,orderid LONG not null,primary key (categoryid, orderid))";
	public static final boolean FINDER_CACHE_ENABLED_ORDERS_CATEGORY = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.Orders_Category"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.practical.model.Category"));

	public CategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _categoryid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCategoryid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _categoryid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Category.class;
	}

	@Override
	public String getModelClassName() {
		return Category.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("categoryid", getCategoryid());
		attributes.put("categoryname", getCategoryname());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long categoryid = (Long)attributes.get("categoryid");

		if (categoryid != null) {
			setCategoryid(categoryid);
		}

		String categoryname = (String)attributes.get("categoryname");

		if (categoryname != null) {
			setCategoryname(categoryname);
		}
	}

	@JSON
	@Override
	public long getCategoryid() {
		return _categoryid;
	}

	@Override
	public void setCategoryid(long categoryid) {
		_categoryid = categoryid;
	}

	@JSON
	@Override
	public String getCategoryname() {
		if (_categoryname == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryname;
		}
	}

	@Override
	public void setCategoryname(String categoryname) {
		_categoryname = categoryname;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Category.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Category toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Category)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CategoryImpl categoryImpl = new CategoryImpl();

		categoryImpl.setCategoryid(getCategoryid());
		categoryImpl.setCategoryname(getCategoryname());

		categoryImpl.resetOriginalValues();

		return categoryImpl;
	}

	@Override
	public int compareTo(Category category) {
		long primaryKey = category.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Category)) {
			return false;
		}

		Category category = (Category)obj;

		long primaryKey = category.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Category> toCacheModel() {
		CategoryCacheModel categoryCacheModel = new CategoryCacheModel();

		categoryCacheModel.categoryid = getCategoryid();

		categoryCacheModel.categoryname = getCategoryname();

		String categoryname = categoryCacheModel.categoryname;

		if ((categoryname != null) && (categoryname.length() == 0)) {
			categoryCacheModel.categoryname = null;
		}

		return categoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{categoryid=");
		sb.append(getCategoryid());
		sb.append(", categoryname=");
		sb.append(getCategoryname());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.practical.model.Category");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoryid</column-name><column-value><![CDATA[");
		sb.append(getCategoryid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryname</column-name><column-value><![CDATA[");
		sb.append(getCategoryname());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Category.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Category.class
		};
	private long _categoryid;
	private String _categoryname;
	private Category _escapedModel;
}