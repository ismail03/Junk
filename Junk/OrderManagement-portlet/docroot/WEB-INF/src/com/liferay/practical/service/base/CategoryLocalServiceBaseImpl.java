/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.practical.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.practical.model.Category;
import com.liferay.practical.service.CategoryLocalService;
import com.liferay.practical.service.persistence.CategoryPersistence;
import com.liferay.practical.service.persistence.OrdersPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the category local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.practical.service.impl.CategoryLocalServiceImpl}.
 * </p>
 *
 * @author saifulla
 * @see com.liferay.practical.service.impl.CategoryLocalServiceImpl
 * @see com.liferay.practical.service.CategoryLocalServiceUtil
 * @generated
 */
public abstract class CategoryLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CategoryLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.practical.service.CategoryLocalServiceUtil} to access the category local service.
	 */

	/**
	 * Adds the category to the database. Also notifies the appropriate model listeners.
	 *
	 * @param category the category
	 * @return the category that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Category addCategory(Category category) throws SystemException {
		category.setNew(true);

		return categoryPersistence.update(category);
	}

	/**
	 * Creates a new category with the primary key. Does not add the category to the database.
	 *
	 * @param categoryid the primary key for the new category
	 * @return the new category
	 */
	@Override
	public Category createCategory(long categoryid) {
		return categoryPersistence.create(categoryid);
	}

	/**
	 * Deletes the category with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param categoryid the primary key of the category
	 * @return the category that was removed
	 * @throws PortalException if a category with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Category deleteCategory(long categoryid)
		throws PortalException, SystemException {
		return categoryPersistence.remove(categoryid);
	}

	/**
	 * Deletes the category from the database. Also notifies the appropriate model listeners.
	 *
	 * @param category the category
	 * @return the category that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Category deleteCategory(Category category) throws SystemException {
		return categoryPersistence.remove(category);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Category.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return categoryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.practical.model.impl.CategoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return categoryPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.practical.model.impl.CategoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return categoryPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return categoryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return categoryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Category fetchCategory(long categoryid) throws SystemException {
		return categoryPersistence.fetchByPrimaryKey(categoryid);
	}

	/**
	 * Returns the category with the primary key.
	 *
	 * @param categoryid the primary key of the category
	 * @return the category
	 * @throws PortalException if a category with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Category getCategory(long categoryid)
		throws PortalException, SystemException {
		return categoryPersistence.findByPrimaryKey(categoryid);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return categoryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the categories.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.practical.model.impl.CategoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of categories
	 * @param end the upper bound of the range of categories (not inclusive)
	 * @return the range of categories
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Category> getCategories(int start, int end)
		throws SystemException {
		return categoryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of categories.
	 *
	 * @return the number of categories
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCategoriesCount() throws SystemException {
		return categoryPersistence.countAll();
	}

	/**
	 * Updates the category in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param category the category
	 * @return the category that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Category updateCategory(Category category) throws SystemException {
		return categoryPersistence.update(category);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addOrdersCategory(long orderid, long categoryid)
		throws SystemException {
		ordersPersistence.addCategory(orderid, categoryid);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addOrdersCategory(long orderid, Category category)
		throws SystemException {
		ordersPersistence.addCategory(orderid, category);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addOrdersCategories(long orderid, long[] categoryids)
		throws SystemException {
		ordersPersistence.addCategories(orderid, categoryids);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void addOrdersCategories(long orderid, List<Category> Categories)
		throws SystemException {
		ordersPersistence.addCategories(orderid, Categories);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void clearOrdersCategories(long orderid) throws SystemException {
		ordersPersistence.clearCategories(orderid);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteOrdersCategory(long orderid, long categoryid)
		throws SystemException {
		ordersPersistence.removeCategory(orderid, categoryid);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteOrdersCategory(long orderid, Category category)
		throws SystemException {
		ordersPersistence.removeCategory(orderid, category);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteOrdersCategories(long orderid, long[] categoryids)
		throws SystemException {
		ordersPersistence.removeCategories(orderid, categoryids);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void deleteOrdersCategories(long orderid, List<Category> Categories)
		throws SystemException {
		ordersPersistence.removeCategories(orderid, Categories);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Category> getOrdersCategories(long orderid)
		throws SystemException {
		return ordersPersistence.getCategories(orderid);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Category> getOrdersCategories(long orderid, int start, int end)
		throws SystemException {
		return ordersPersistence.getCategories(orderid, start, end);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Category> getOrdersCategories(long orderid, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return ordersPersistence.getCategories(orderid, start, end,
			orderByComparator);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getOrdersCategoriesCount(long orderid) throws SystemException {
		return ordersPersistence.getCategoriesSize(orderid);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasOrdersCategory(long orderid, long categoryid)
		throws SystemException {
		return ordersPersistence.containsCategory(orderid, categoryid);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public boolean hasOrdersCategories(long orderid) throws SystemException {
		return ordersPersistence.containsCategories(orderid);
	}

	/**
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void setOrdersCategories(long orderid, long[] categoryids)
		throws SystemException {
		ordersPersistence.setCategories(orderid, categoryids);
	}

	/**
	 * Returns the category local service.
	 *
	 * @return the category local service
	 */
	public com.liferay.practical.service.CategoryLocalService getCategoryLocalService() {
		return categoryLocalService;
	}

	/**
	 * Sets the category local service.
	 *
	 * @param categoryLocalService the category local service
	 */
	public void setCategoryLocalService(
		com.liferay.practical.service.CategoryLocalService categoryLocalService) {
		this.categoryLocalService = categoryLocalService;
	}

	/**
	 * Returns the category remote service.
	 *
	 * @return the category remote service
	 */
	public com.liferay.practical.service.CategoryService getCategoryService() {
		return categoryService;
	}

	/**
	 * Sets the category remote service.
	 *
	 * @param categoryService the category remote service
	 */
	public void setCategoryService(
		com.liferay.practical.service.CategoryService categoryService) {
		this.categoryService = categoryService;
	}

	/**
	 * Returns the category persistence.
	 *
	 * @return the category persistence
	 */
	public CategoryPersistence getCategoryPersistence() {
		return categoryPersistence;
	}

	/**
	 * Sets the category persistence.
	 *
	 * @param categoryPersistence the category persistence
	 */
	public void setCategoryPersistence(CategoryPersistence categoryPersistence) {
		this.categoryPersistence = categoryPersistence;
	}

	/**
	 * Returns the orders local service.
	 *
	 * @return the orders local service
	 */
	public com.liferay.practical.service.OrdersLocalService getOrdersLocalService() {
		return ordersLocalService;
	}

	/**
	 * Sets the orders local service.
	 *
	 * @param ordersLocalService the orders local service
	 */
	public void setOrdersLocalService(
		com.liferay.practical.service.OrdersLocalService ordersLocalService) {
		this.ordersLocalService = ordersLocalService;
	}

	/**
	 * Returns the orders remote service.
	 *
	 * @return the orders remote service
	 */
	public com.liferay.practical.service.OrdersService getOrdersService() {
		return ordersService;
	}

	/**
	 * Sets the orders remote service.
	 *
	 * @param ordersService the orders remote service
	 */
	public void setOrdersService(
		com.liferay.practical.service.OrdersService ordersService) {
		this.ordersService = ordersService;
	}

	/**
	 * Returns the orders persistence.
	 *
	 * @return the orders persistence
	 */
	public OrdersPersistence getOrdersPersistence() {
		return ordersPersistence;
	}

	/**
	 * Sets the orders persistence.
	 *
	 * @param ordersPersistence the orders persistence
	 */
	public void setOrdersPersistence(OrdersPersistence ordersPersistence) {
		this.ordersPersistence = ordersPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.practical.model.Category",
			categoryLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.practical.model.Category");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Category.class;
	}

	protected String getModelClassName() {
		return Category.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = categoryPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.practical.service.CategoryLocalService.class)
	protected com.liferay.practical.service.CategoryLocalService categoryLocalService;
	@BeanReference(type = com.liferay.practical.service.CategoryService.class)
	protected com.liferay.practical.service.CategoryService categoryService;
	@BeanReference(type = CategoryPersistence.class)
	protected CategoryPersistence categoryPersistence;
	@BeanReference(type = com.liferay.practical.service.OrdersLocalService.class)
	protected com.liferay.practical.service.OrdersLocalService ordersLocalService;
	@BeanReference(type = com.liferay.practical.service.OrdersService.class)
	protected com.liferay.practical.service.OrdersService ordersService;
	@BeanReference(type = OrdersPersistence.class)
	protected OrdersPersistence ordersPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CategoryLocalServiceClpInvoker _clpInvoker = new CategoryLocalServiceClpInvoker();
}