package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.stc.echannels.epayments.model.NotifConfig;
import com.stc.echannels.epayments.model.NotifConfigModel;
import com.stc.echannels.epayments.model.NotifConfigSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NotifConfig service. Represents a row in the &quot;NOTIF_CONFIG_MGR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.NotifConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotifConfigImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see NotifConfigImpl
 * @see com.stc.echannels.epayments.model.NotifConfig
 * @see com.stc.echannels.epayments.model.NotifConfigModel
 * @generated
 */
@JSON(strict = true)
public class NotifConfigModelImpl extends BaseModelImpl<NotifConfig>
    implements NotifConfigModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a notif config model instance should use the {@link com.stc.echannels.epayments.model.NotifConfig} interface instead.
     */
    public static final String TABLE_NAME = "NOTIF_CONFIG_MGR";
    public static final Object[][] TABLE_COLUMNS = {
            { "NOTIF_ID", Types.BIGINT },
            { "TRANS_ID", Types.VARCHAR },
            { "last_update_timestamp", Types.TIMESTAMP },
            { "last_update_userid", Types.VARCHAR },
            { "last_update_username", Types.VARCHAR },
            { "status", Types.VARCHAR },
            { "active", Types.VARCHAR },
            { "effective_timestamp", Types.TIMESTAMP },
            { "CLIENT_IP", Types.VARCHAR },
            { "SERVER_IP", Types.VARCHAR },
            { "USER_AGENT", Types.VARCHAR },
            { "OPERATION", Types.VARCHAR },
            { "ENABLED", Types.VARCHAR },
            { "NOTIF_MSG_EN", Types.VARCHAR },
            { "NOTIF_MSG_AR", Types.VARCHAR },
            { "NOTIF_PARAM_1", Types.VARCHAR },
            { "NOTIF_PARAM_2", Types.VARCHAR },
            { "NOTIF_PARAM_3", Types.VARCHAR },
            { "NOTIF_PARAM_4", Types.VARCHAR },
            { "NOTIF_PARAM_5", Types.VARCHAR },
            { "DESCRIPTIVE_NAME_EN", Types.VARCHAR },
            { "DESCRIPTIVE_NAME_Ar", Types.VARCHAR },
            { "NOTIF_NAME", Types.VARCHAR },
            { "SERVICE_ID", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table NOTIF_CONFIG_MGR (NOTIF_ID LONG not null primary key,TRANS_ID VARCHAR(75) null,last_update_timestamp DATE null,last_update_userid VARCHAR(75) null,last_update_username VARCHAR(75) null,status VARCHAR(75) null,active VARCHAR(75) null,effective_timestamp DATE null,CLIENT_IP VARCHAR(75) null,SERVER_IP VARCHAR(75) null,USER_AGENT VARCHAR(200) null,OPERATION VARCHAR(75) null,ENABLED VARCHAR(75) null,NOTIF_MSG_EN VARCHAR(200) null,NOTIF_MSG_AR VARCHAR(200) null,NOTIF_PARAM_1 VARCHAR(75) null,NOTIF_PARAM_2 VARCHAR(75) null,NOTIF_PARAM_3 VARCHAR(75) null,NOTIF_PARAM_4 VARCHAR(75) null,NOTIF_PARAM_5 VARCHAR(75) null,DESCRIPTIVE_NAME_EN VARCHAR(75) null,DESCRIPTIVE_NAME_Ar VARCHAR(75) null,NOTIF_NAME VARCHAR(75) null,SERVICE_ID LONG)";
    public static final String TABLE_SQL_DROP = "drop table NOTIF_CONFIG_MGR";
    public static final String ORDER_BY_JPQL = " ORDER BY notifConfig.notifName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NOTIF_CONFIG_MGR.NOTIF_NAME ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.NotifConfig"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.NotifConfig"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.NotifConfig"),
            true);
    public static long NOTIFID_COLUMN_BITMASK = 1L;
    public static long SERVICEID_COLUMN_BITMASK = 2L;
    public static long STATUS_COLUMN_BITMASK = 4L;
    public static long NOTIFNAME_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.NotifConfig"));
    private static ClassLoader _classLoader = NotifConfig.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NotifConfig.class
        };
    private long _notifId;
    private long _originalNotifId;
    private boolean _setOriginalNotifId;
    private String _transId;
    private Date _lastUpdateTimestamp;
    private String _lastUpdateUserid;
    private String _lastUpdateUsername;
    private String _status;
    private String _originalStatus;
    private String _active;
    private Date _effectiveTimestamp;
    private String _clientIp;
    private String _serverIp;
    private String _userAgent;
    private String _operation;
    private String _enabled;
    private String _msgEn;
    private String _msgAr;
    private String _param1;
    private String _param2;
    private String _param3;
    private String _param4;
    private String _param5;
    private String _decriptiveNameEn;
    private String _decriptiveNameAr;
    private String _notifName;
    private long _serviceId;
    private long _originalServiceId;
    private boolean _setOriginalServiceId;
    private long _columnBitmask;
    private NotifConfig _escapedModel;

    public NotifConfigModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static NotifConfig toModel(NotifConfigSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        NotifConfig model = new NotifConfigImpl();

        model.setNotifId(soapModel.getNotifId());
        model.setTransId(soapModel.getTransId());
        model.setLastUpdateTimestamp(soapModel.getLastUpdateTimestamp());
        model.setLastUpdateUserid(soapModel.getLastUpdateUserid());
        model.setLastUpdateUsername(soapModel.getLastUpdateUsername());
        model.setStatus(soapModel.getStatus());
        model.setActive(soapModel.getActive());
        model.setEffectiveTimestamp(soapModel.getEffectiveTimestamp());
        model.setClientIp(soapModel.getClientIp());
        model.setServerIp(soapModel.getServerIp());
        model.setUserAgent(soapModel.getUserAgent());
        model.setOperation(soapModel.getOperation());
        model.setEnabled(soapModel.getEnabled());
        model.setMsgEn(soapModel.getMsgEn());
        model.setMsgAr(soapModel.getMsgAr());
        model.setParam1(soapModel.getParam1());
        model.setParam2(soapModel.getParam2());
        model.setParam3(soapModel.getParam3());
        model.setParam4(soapModel.getParam4());
        model.setParam5(soapModel.getParam5());
        model.setDecriptiveNameEn(soapModel.getDecriptiveNameEn());
        model.setDecriptiveNameAr(soapModel.getDecriptiveNameAr());
        model.setNotifName(soapModel.getNotifName());
        model.setServiceId(soapModel.getServiceId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<NotifConfig> toModels(NotifConfigSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<NotifConfig> models = new ArrayList<NotifConfig>(soapModels.length);

        for (NotifConfigSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _notifId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setNotifId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _notifId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return NotifConfig.class;
    }

    @Override
    public String getModelClassName() {
        return NotifConfig.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("notifId", getNotifId());
        attributes.put("transId", getTransId());
        attributes.put("lastUpdateTimestamp", getLastUpdateTimestamp());
        attributes.put("lastUpdateUserid", getLastUpdateUserid());
        attributes.put("lastUpdateUsername", getLastUpdateUsername());
        attributes.put("status", getStatus());
        attributes.put("active", getActive());
        attributes.put("effectiveTimestamp", getEffectiveTimestamp());
        attributes.put("clientIp", getClientIp());
        attributes.put("serverIp", getServerIp());
        attributes.put("userAgent", getUserAgent());
        attributes.put("operation", getOperation());
        attributes.put("enabled", getEnabled());
        attributes.put("msgEn", getMsgEn());
        attributes.put("msgAr", getMsgAr());
        attributes.put("param1", getParam1());
        attributes.put("param2", getParam2());
        attributes.put("param3", getParam3());
        attributes.put("param4", getParam4());
        attributes.put("param5", getParam5());
        attributes.put("decriptiveNameEn", getDecriptiveNameEn());
        attributes.put("decriptiveNameAr", getDecriptiveNameAr());
        attributes.put("notifName", getNotifName());
        attributes.put("serviceId", getServiceId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long notifId = (Long) attributes.get("notifId");

        if (notifId != null) {
            setNotifId(notifId);
        }

        String transId = (String) attributes.get("transId");

        if (transId != null) {
            setTransId(transId);
        }

        Date lastUpdateTimestamp = (Date) attributes.get("lastUpdateTimestamp");

        if (lastUpdateTimestamp != null) {
            setLastUpdateTimestamp(lastUpdateTimestamp);
        }

        String lastUpdateUserid = (String) attributes.get("lastUpdateUserid");

        if (lastUpdateUserid != null) {
            setLastUpdateUserid(lastUpdateUserid);
        }

        String lastUpdateUsername = (String) attributes.get(
                "lastUpdateUsername");

        if (lastUpdateUsername != null) {
            setLastUpdateUsername(lastUpdateUsername);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String active = (String) attributes.get("active");

        if (active != null) {
            setActive(active);
        }

        Date effectiveTimestamp = (Date) attributes.get("effectiveTimestamp");

        if (effectiveTimestamp != null) {
            setEffectiveTimestamp(effectiveTimestamp);
        }

        String clientIp = (String) attributes.get("clientIp");

        if (clientIp != null) {
            setClientIp(clientIp);
        }

        String serverIp = (String) attributes.get("serverIp");

        if (serverIp != null) {
            setServerIp(serverIp);
        }

        String userAgent = (String) attributes.get("userAgent");

        if (userAgent != null) {
            setUserAgent(userAgent);
        }

        String operation = (String) attributes.get("operation");

        if (operation != null) {
            setOperation(operation);
        }

        String enabled = (String) attributes.get("enabled");

        if (enabled != null) {
            setEnabled(enabled);
        }

        String msgEn = (String) attributes.get("msgEn");

        if (msgEn != null) {
            setMsgEn(msgEn);
        }

        String msgAr = (String) attributes.get("msgAr");

        if (msgAr != null) {
            setMsgAr(msgAr);
        }

        String param1 = (String) attributes.get("param1");

        if (param1 != null) {
            setParam1(param1);
        }

        String param2 = (String) attributes.get("param2");

        if (param2 != null) {
            setParam2(param2);
        }

        String param3 = (String) attributes.get("param3");

        if (param3 != null) {
            setParam3(param3);
        }

        String param4 = (String) attributes.get("param4");

        if (param4 != null) {
            setParam4(param4);
        }

        String param5 = (String) attributes.get("param5");

        if (param5 != null) {
            setParam5(param5);
        }

        String decriptiveNameEn = (String) attributes.get("decriptiveNameEn");

        if (decriptiveNameEn != null) {
            setDecriptiveNameEn(decriptiveNameEn);
        }

        String decriptiveNameAr = (String) attributes.get("decriptiveNameAr");

        if (decriptiveNameAr != null) {
            setDecriptiveNameAr(decriptiveNameAr);
        }

        String notifName = (String) attributes.get("notifName");

        if (notifName != null) {
            setNotifName(notifName);
        }

        Long serviceId = (Long) attributes.get("serviceId");

        if (serviceId != null) {
            setServiceId(serviceId);
        }
    }

    @JSON
    @Override
    public long getNotifId() {
        return _notifId;
    }

    @Override
    public void setNotifId(long notifId) {
        _columnBitmask |= NOTIFID_COLUMN_BITMASK;

        if (!_setOriginalNotifId) {
            _setOriginalNotifId = true;

            _originalNotifId = _notifId;
        }

        _notifId = notifId;
    }

    public long getOriginalNotifId() {
        return _originalNotifId;
    }

    @JSON
    @Override
    public String getTransId() {
        if (_transId == null) {
            return StringPool.BLANK;
        } else {
            return _transId;
        }
    }

    @Override
    public void setTransId(String transId) {
        _transId = transId;
    }

    @JSON
    @Override
    public Date getLastUpdateTimestamp() {
        return _lastUpdateTimestamp;
    }

    @Override
    public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
        _lastUpdateTimestamp = lastUpdateTimestamp;
    }

    @JSON
    @Override
    public String getLastUpdateUserid() {
        if (_lastUpdateUserid == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUserid;
        }
    }

    @Override
    public void setLastUpdateUserid(String lastUpdateUserid) {
        _lastUpdateUserid = lastUpdateUserid;
    }

    @JSON
    @Override
    public String getLastUpdateUsername() {
        if (_lastUpdateUsername == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUsername;
        }
    }

    @Override
    public void setLastUpdateUsername(String lastUpdateUsername) {
        _lastUpdateUsername = lastUpdateUsername;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (_originalStatus == null) {
            _originalStatus = _status;
        }

        _status = status;
    }

    public String getOriginalStatus() {
        return GetterUtil.getString(_originalStatus);
    }

    @JSON
    @Override
    public String getActive() {
        if (_active == null) {
            return StringPool.BLANK;
        } else {
            return _active;
        }
    }

    @Override
    public void setActive(String active) {
        _active = active;
    }

    @JSON
    @Override
    public Date getEffectiveTimestamp() {
        return _effectiveTimestamp;
    }

    @Override
    public void setEffectiveTimestamp(Date effectiveTimestamp) {
        _effectiveTimestamp = effectiveTimestamp;
    }

    @JSON
    @Override
    public String getClientIp() {
        if (_clientIp == null) {
            return StringPool.BLANK;
        } else {
            return _clientIp;
        }
    }

    @Override
    public void setClientIp(String clientIp) {
        _clientIp = clientIp;
    }

    @JSON
    @Override
    public String getServerIp() {
        if (_serverIp == null) {
            return StringPool.BLANK;
        } else {
            return _serverIp;
        }
    }

    @Override
    public void setServerIp(String serverIp) {
        _serverIp = serverIp;
    }

    @JSON
    @Override
    public String getUserAgent() {
        if (_userAgent == null) {
            return StringPool.BLANK;
        } else {
            return _userAgent;
        }
    }

    @Override
    public void setUserAgent(String userAgent) {
        _userAgent = userAgent;
    }

    @JSON
    @Override
    public String getOperation() {
        if (_operation == null) {
            return StringPool.BLANK;
        } else {
            return _operation;
        }
    }

    @Override
    public void setOperation(String operation) {
        _operation = operation;
    }

    @JSON
    @Override
    public String getEnabled() {
        if (_enabled == null) {
            return StringPool.BLANK;
        } else {
            return _enabled;
        }
    }

    @Override
    public void setEnabled(String enabled) {
        _enabled = enabled;
    }

    @JSON
    @Override
    public String getMsgEn() {
        if (_msgEn == null) {
            return StringPool.BLANK;
        } else {
            return _msgEn;
        }
    }

    @Override
    public void setMsgEn(String msgEn) {
        _msgEn = msgEn;
    }

    @JSON
    @Override
    public String getMsgAr() {
        if (_msgAr == null) {
            return StringPool.BLANK;
        } else {
            return _msgAr;
        }
    }

    @Override
    public void setMsgAr(String msgAr) {
        _msgAr = msgAr;
    }

    @JSON
    @Override
    public String getParam1() {
        if (_param1 == null) {
            return StringPool.BLANK;
        } else {
            return _param1;
        }
    }

    @Override
    public void setParam1(String param1) {
        _param1 = param1;
    }

    @JSON
    @Override
    public String getParam2() {
        if (_param2 == null) {
            return StringPool.BLANK;
        } else {
            return _param2;
        }
    }

    @Override
    public void setParam2(String param2) {
        _param2 = param2;
    }

    @JSON
    @Override
    public String getParam3() {
        if (_param3 == null) {
            return StringPool.BLANK;
        } else {
            return _param3;
        }
    }

    @Override
    public void setParam3(String param3) {
        _param3 = param3;
    }

    @JSON
    @Override
    public String getParam4() {
        if (_param4 == null) {
            return StringPool.BLANK;
        } else {
            return _param4;
        }
    }

    @Override
    public void setParam4(String param4) {
        _param4 = param4;
    }

    @JSON
    @Override
    public String getParam5() {
        if (_param5 == null) {
            return StringPool.BLANK;
        } else {
            return _param5;
        }
    }

    @Override
    public void setParam5(String param5) {
        _param5 = param5;
    }

    @JSON
    @Override
    public String getDecriptiveNameEn() {
        if (_decriptiveNameEn == null) {
            return StringPool.BLANK;
        } else {
            return _decriptiveNameEn;
        }
    }

    @Override
    public void setDecriptiveNameEn(String decriptiveNameEn) {
        _decriptiveNameEn = decriptiveNameEn;
    }

    @JSON
    @Override
    public String getDecriptiveNameAr() {
        if (_decriptiveNameAr == null) {
            return StringPool.BLANK;
        } else {
            return _decriptiveNameAr;
        }
    }

    @Override
    public void setDecriptiveNameAr(String decriptiveNameAr) {
        _decriptiveNameAr = decriptiveNameAr;
    }

    @JSON
    @Override
    public String getNotifName() {
        if (_notifName == null) {
            return StringPool.BLANK;
        } else {
            return _notifName;
        }
    }

    @Override
    public void setNotifName(String notifName) {
        _columnBitmask = -1L;

        _notifName = notifName;
    }

    @JSON
    @Override
    public long getServiceId() {
        return _serviceId;
    }

    @Override
    public void setServiceId(long serviceId) {
        _columnBitmask |= SERVICEID_COLUMN_BITMASK;

        if (!_setOriginalServiceId) {
            _setOriginalServiceId = true;

            _originalServiceId = _serviceId;
        }

        _serviceId = serviceId;
    }

    public long getOriginalServiceId() {
        return _originalServiceId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            NotifConfig.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public NotifConfig toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NotifConfig) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NotifConfigImpl notifConfigImpl = new NotifConfigImpl();

        notifConfigImpl.setNotifId(getNotifId());
        notifConfigImpl.setTransId(getTransId());
        notifConfigImpl.setLastUpdateTimestamp(getLastUpdateTimestamp());
        notifConfigImpl.setLastUpdateUserid(getLastUpdateUserid());
        notifConfigImpl.setLastUpdateUsername(getLastUpdateUsername());
        notifConfigImpl.setStatus(getStatus());
        notifConfigImpl.setActive(getActive());
        notifConfigImpl.setEffectiveTimestamp(getEffectiveTimestamp());
        notifConfigImpl.setClientIp(getClientIp());
        notifConfigImpl.setServerIp(getServerIp());
        notifConfigImpl.setUserAgent(getUserAgent());
        notifConfigImpl.setOperation(getOperation());
        notifConfigImpl.setEnabled(getEnabled());
        notifConfigImpl.setMsgEn(getMsgEn());
        notifConfigImpl.setMsgAr(getMsgAr());
        notifConfigImpl.setParam1(getParam1());
        notifConfigImpl.setParam2(getParam2());
        notifConfigImpl.setParam3(getParam3());
        notifConfigImpl.setParam4(getParam4());
        notifConfigImpl.setParam5(getParam5());
        notifConfigImpl.setDecriptiveNameEn(getDecriptiveNameEn());
        notifConfigImpl.setDecriptiveNameAr(getDecriptiveNameAr());
        notifConfigImpl.setNotifName(getNotifName());
        notifConfigImpl.setServiceId(getServiceId());

        notifConfigImpl.resetOriginalValues();

        return notifConfigImpl;
    }

    @Override
    public int compareTo(NotifConfig notifConfig) {
        int value = 0;

        value = getNotifName().compareTo(notifConfig.getNotifName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NotifConfig)) {
            return false;
        }

        NotifConfig notifConfig = (NotifConfig) obj;

        long primaryKey = notifConfig.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        NotifConfigModelImpl notifConfigModelImpl = this;

        notifConfigModelImpl._originalNotifId = notifConfigModelImpl._notifId;

        notifConfigModelImpl._setOriginalNotifId = false;

        notifConfigModelImpl._originalStatus = notifConfigModelImpl._status;

        notifConfigModelImpl._originalServiceId = notifConfigModelImpl._serviceId;

        notifConfigModelImpl._setOriginalServiceId = false;

        notifConfigModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<NotifConfig> toCacheModel() {
        NotifConfigCacheModel notifConfigCacheModel = new NotifConfigCacheModel();

        notifConfigCacheModel.notifId = getNotifId();

        notifConfigCacheModel.transId = getTransId();

        String transId = notifConfigCacheModel.transId;

        if ((transId != null) && (transId.length() == 0)) {
            notifConfigCacheModel.transId = null;
        }

        Date lastUpdateTimestamp = getLastUpdateTimestamp();

        if (lastUpdateTimestamp != null) {
            notifConfigCacheModel.lastUpdateTimestamp = lastUpdateTimestamp.getTime();
        } else {
            notifConfigCacheModel.lastUpdateTimestamp = Long.MIN_VALUE;
        }

        notifConfigCacheModel.lastUpdateUserid = getLastUpdateUserid();

        String lastUpdateUserid = notifConfigCacheModel.lastUpdateUserid;

        if ((lastUpdateUserid != null) && (lastUpdateUserid.length() == 0)) {
            notifConfigCacheModel.lastUpdateUserid = null;
        }

        notifConfigCacheModel.lastUpdateUsername = getLastUpdateUsername();

        String lastUpdateUsername = notifConfigCacheModel.lastUpdateUsername;

        if ((lastUpdateUsername != null) && (lastUpdateUsername.length() == 0)) {
            notifConfigCacheModel.lastUpdateUsername = null;
        }

        notifConfigCacheModel.status = getStatus();

        String status = notifConfigCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            notifConfigCacheModel.status = null;
        }

        notifConfigCacheModel.active = getActive();

        String active = notifConfigCacheModel.active;

        if ((active != null) && (active.length() == 0)) {
            notifConfigCacheModel.active = null;
        }

        Date effectiveTimestamp = getEffectiveTimestamp();

        if (effectiveTimestamp != null) {
            notifConfigCacheModel.effectiveTimestamp = effectiveTimestamp.getTime();
        } else {
            notifConfigCacheModel.effectiveTimestamp = Long.MIN_VALUE;
        }

        notifConfigCacheModel.clientIp = getClientIp();

        String clientIp = notifConfigCacheModel.clientIp;

        if ((clientIp != null) && (clientIp.length() == 0)) {
            notifConfigCacheModel.clientIp = null;
        }

        notifConfigCacheModel.serverIp = getServerIp();

        String serverIp = notifConfigCacheModel.serverIp;

        if ((serverIp != null) && (serverIp.length() == 0)) {
            notifConfigCacheModel.serverIp = null;
        }

        notifConfigCacheModel.userAgent = getUserAgent();

        String userAgent = notifConfigCacheModel.userAgent;

        if ((userAgent != null) && (userAgent.length() == 0)) {
            notifConfigCacheModel.userAgent = null;
        }

        notifConfigCacheModel.operation = getOperation();

        String operation = notifConfigCacheModel.operation;

        if ((operation != null) && (operation.length() == 0)) {
            notifConfigCacheModel.operation = null;
        }

        notifConfigCacheModel.enabled = getEnabled();

        String enabled = notifConfigCacheModel.enabled;

        if ((enabled != null) && (enabled.length() == 0)) {
            notifConfigCacheModel.enabled = null;
        }

        notifConfigCacheModel.msgEn = getMsgEn();

        String msgEn = notifConfigCacheModel.msgEn;

        if ((msgEn != null) && (msgEn.length() == 0)) {
            notifConfigCacheModel.msgEn = null;
        }

        notifConfigCacheModel.msgAr = getMsgAr();

        String msgAr = notifConfigCacheModel.msgAr;

        if ((msgAr != null) && (msgAr.length() == 0)) {
            notifConfigCacheModel.msgAr = null;
        }

        notifConfigCacheModel.param1 = getParam1();

        String param1 = notifConfigCacheModel.param1;

        if ((param1 != null) && (param1.length() == 0)) {
            notifConfigCacheModel.param1 = null;
        }

        notifConfigCacheModel.param2 = getParam2();

        String param2 = notifConfigCacheModel.param2;

        if ((param2 != null) && (param2.length() == 0)) {
            notifConfigCacheModel.param2 = null;
        }

        notifConfigCacheModel.param3 = getParam3();

        String param3 = notifConfigCacheModel.param3;

        if ((param3 != null) && (param3.length() == 0)) {
            notifConfigCacheModel.param3 = null;
        }

        notifConfigCacheModel.param4 = getParam4();

        String param4 = notifConfigCacheModel.param4;

        if ((param4 != null) && (param4.length() == 0)) {
            notifConfigCacheModel.param4 = null;
        }

        notifConfigCacheModel.param5 = getParam5();

        String param5 = notifConfigCacheModel.param5;

        if ((param5 != null) && (param5.length() == 0)) {
            notifConfigCacheModel.param5 = null;
        }

        notifConfigCacheModel.decriptiveNameEn = getDecriptiveNameEn();

        String decriptiveNameEn = notifConfigCacheModel.decriptiveNameEn;

        if ((decriptiveNameEn != null) && (decriptiveNameEn.length() == 0)) {
            notifConfigCacheModel.decriptiveNameEn = null;
        }

        notifConfigCacheModel.decriptiveNameAr = getDecriptiveNameAr();

        String decriptiveNameAr = notifConfigCacheModel.decriptiveNameAr;

        if ((decriptiveNameAr != null) && (decriptiveNameAr.length() == 0)) {
            notifConfigCacheModel.decriptiveNameAr = null;
        }

        notifConfigCacheModel.notifName = getNotifName();

        String notifName = notifConfigCacheModel.notifName;

        if ((notifName != null) && (notifName.length() == 0)) {
            notifConfigCacheModel.notifName = null;
        }

        notifConfigCacheModel.serviceId = getServiceId();

        return notifConfigCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(49);

        sb.append("{notifId=");
        sb.append(getNotifId());
        sb.append(", transId=");
        sb.append(getTransId());
        sb.append(", lastUpdateTimestamp=");
        sb.append(getLastUpdateTimestamp());
        sb.append(", lastUpdateUserid=");
        sb.append(getLastUpdateUserid());
        sb.append(", lastUpdateUsername=");
        sb.append(getLastUpdateUsername());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", active=");
        sb.append(getActive());
        sb.append(", effectiveTimestamp=");
        sb.append(getEffectiveTimestamp());
        sb.append(", clientIp=");
        sb.append(getClientIp());
        sb.append(", serverIp=");
        sb.append(getServerIp());
        sb.append(", userAgent=");
        sb.append(getUserAgent());
        sb.append(", operation=");
        sb.append(getOperation());
        sb.append(", enabled=");
        sb.append(getEnabled());
        sb.append(", msgEn=");
        sb.append(getMsgEn());
        sb.append(", msgAr=");
        sb.append(getMsgAr());
        sb.append(", param1=");
        sb.append(getParam1());
        sb.append(", param2=");
        sb.append(getParam2());
        sb.append(", param3=");
        sb.append(getParam3());
        sb.append(", param4=");
        sb.append(getParam4());
        sb.append(", param5=");
        sb.append(getParam5());
        sb.append(", decriptiveNameEn=");
        sb.append(getDecriptiveNameEn());
        sb.append(", decriptiveNameAr=");
        sb.append(getDecriptiveNameAr());
        sb.append(", notifName=");
        sb.append(getNotifName());
        sb.append(", serviceId=");
        sb.append(getServiceId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(76);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.NotifConfig");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>notifId</column-name><column-value><![CDATA[");
        sb.append(getNotifId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transId</column-name><column-value><![CDATA[");
        sb.append(getTransId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateTimestamp</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUserid</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUserid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUsername</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUsername());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>active</column-name><column-value><![CDATA[");
        sb.append(getActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>effectiveTimestamp</column-name><column-value><![CDATA[");
        sb.append(getEffectiveTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clientIp</column-name><column-value><![CDATA[");
        sb.append(getClientIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serverIp</column-name><column-value><![CDATA[");
        sb.append(getServerIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userAgent</column-name><column-value><![CDATA[");
        sb.append(getUserAgent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>operation</column-name><column-value><![CDATA[");
        sb.append(getOperation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>enabled</column-name><column-value><![CDATA[");
        sb.append(getEnabled());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>msgEn</column-name><column-value><![CDATA[");
        sb.append(getMsgEn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>msgAr</column-name><column-value><![CDATA[");
        sb.append(getMsgAr());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>param1</column-name><column-value><![CDATA[");
        sb.append(getParam1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>param2</column-name><column-value><![CDATA[");
        sb.append(getParam2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>param3</column-name><column-value><![CDATA[");
        sb.append(getParam3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>param4</column-name><column-value><![CDATA[");
        sb.append(getParam4());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>param5</column-name><column-value><![CDATA[");
        sb.append(getParam5());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>decriptiveNameEn</column-name><column-value><![CDATA[");
        sb.append(getDecriptiveNameEn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>decriptiveNameAr</column-name><column-value><![CDATA[");
        sb.append(getDecriptiveNameAr());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>notifName</column-name><column-value><![CDATA[");
        sb.append(getNotifName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceId</column-name><column-value><![CDATA[");
        sb.append(getServiceId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
