package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.stc.echannels.epayments.model.NotifParamSrv;
import com.stc.echannels.epayments.model.NotifParamSrvModel;
import com.stc.echannels.epayments.model.NotifParamSrvSoap;
import com.stc.echannels.epayments.service.persistence.NotifParamSrvPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NotifParamSrv service. Represents a row in the &quot;NOTIF_PARAMS_SERVICES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.NotifParamSrvModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotifParamSrvImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see NotifParamSrvImpl
 * @see com.stc.echannels.epayments.model.NotifParamSrv
 * @see com.stc.echannels.epayments.model.NotifParamSrvModel
 * @generated
 */
@JSON(strict = true)
public class NotifParamSrvModelImpl extends BaseModelImpl<NotifParamSrv>
    implements NotifParamSrvModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a notif param srv model instance should use the {@link com.stc.echannels.epayments.model.NotifParamSrv} interface instead.
     */
    public static final String TABLE_NAME = "NOTIF_PARAMS_SERVICES";
    public static final Object[][] TABLE_COLUMNS = {
            { "NOTIF_PARAM_ID", Types.BIGINT },
            { "SERVICE_ID", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table NOTIF_PARAMS_SERVICES (NOTIF_PARAM_ID LONG not null,SERVICE_ID LONG not null,primary key (NOTIF_PARAM_ID, SERVICE_ID))";
    public static final String TABLE_SQL_DROP = "drop table NOTIF_PARAMS_SERVICES";
    public static final String ORDER_BY_JPQL = " ORDER BY notifParamSrv.id.notifParamId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY NOTIF_PARAMS_SERVICES.NOTIF_PARAM_ID ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.NotifParamSrv"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.NotifParamSrv"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.NotifParamSrv"),
            true);
    public static long SERVICEID_COLUMN_BITMASK = 1L;
    public static long NOTIFPARAMID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.NotifParamSrv"));
    private static ClassLoader _classLoader = NotifParamSrv.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NotifParamSrv.class
        };
    private long _notifParamId;
    private long _serviceId;
    private long _originalServiceId;
    private boolean _setOriginalServiceId;
    private long _columnBitmask;
    private NotifParamSrv _escapedModel;

    public NotifParamSrvModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static NotifParamSrv toModel(NotifParamSrvSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        NotifParamSrv model = new NotifParamSrvImpl();

        model.setNotifParamId(soapModel.getNotifParamId());
        model.setServiceId(soapModel.getServiceId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<NotifParamSrv> toModels(NotifParamSrvSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<NotifParamSrv> models = new ArrayList<NotifParamSrv>(soapModels.length);

        for (NotifParamSrvSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public NotifParamSrvPK getPrimaryKey() {
        return new NotifParamSrvPK(_notifParamId, _serviceId);
    }

    @Override
    public void setPrimaryKey(NotifParamSrvPK primaryKey) {
        setNotifParamId(primaryKey.notifParamId);
        setServiceId(primaryKey.serviceId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new NotifParamSrvPK(_notifParamId, _serviceId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((NotifParamSrvPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return NotifParamSrv.class;
    }

    @Override
    public String getModelClassName() {
        return NotifParamSrv.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("notifParamId", getNotifParamId());
        attributes.put("serviceId", getServiceId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long notifParamId = (Long) attributes.get("notifParamId");

        if (notifParamId != null) {
            setNotifParamId(notifParamId);
        }

        Long serviceId = (Long) attributes.get("serviceId");

        if (serviceId != null) {
            setServiceId(serviceId);
        }
    }

    @JSON
    @Override
    public long getNotifParamId() {
        return _notifParamId;
    }

    @Override
    public void setNotifParamId(long notifParamId) {
        _columnBitmask = -1L;

        _notifParamId = notifParamId;
    }

    @JSON
    @Override
    public long getServiceId() {
        return _serviceId;
    }

    @Override
    public void setServiceId(long serviceId) {
        _columnBitmask |= SERVICEID_COLUMN_BITMASK;

        if (!_setOriginalServiceId) {
            _setOriginalServiceId = true;

            _originalServiceId = _serviceId;
        }

        _serviceId = serviceId;
    }

    public long getOriginalServiceId() {
        return _originalServiceId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public NotifParamSrv toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NotifParamSrv) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NotifParamSrvImpl notifParamSrvImpl = new NotifParamSrvImpl();

        notifParamSrvImpl.setNotifParamId(getNotifParamId());
        notifParamSrvImpl.setServiceId(getServiceId());

        notifParamSrvImpl.resetOriginalValues();

        return notifParamSrvImpl;
    }

    @Override
    public int compareTo(NotifParamSrv notifParamSrv) {
        int value = 0;

        if (getNotifParamId() < notifParamSrv.getNotifParamId()) {
            value = -1;
        } else if (getNotifParamId() > notifParamSrv.getNotifParamId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NotifParamSrv)) {
            return false;
        }

        NotifParamSrv notifParamSrv = (NotifParamSrv) obj;

        NotifParamSrvPK primaryKey = notifParamSrv.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        NotifParamSrvModelImpl notifParamSrvModelImpl = this;

        notifParamSrvModelImpl._originalServiceId = notifParamSrvModelImpl._serviceId;

        notifParamSrvModelImpl._setOriginalServiceId = false;

        notifParamSrvModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<NotifParamSrv> toCacheModel() {
        NotifParamSrvCacheModel notifParamSrvCacheModel = new NotifParamSrvCacheModel();

        notifParamSrvCacheModel.notifParamId = getNotifParamId();

        notifParamSrvCacheModel.serviceId = getServiceId();

        return notifParamSrvCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{notifParamId=");
        sb.append(getNotifParamId());
        sb.append(", serviceId=");
        sb.append(getServiceId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.NotifParamSrv");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>notifParamId</column-name><column-value><![CDATA[");
        sb.append(getNotifParamId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceId</column-name><column-value><![CDATA[");
        sb.append(getServiceId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
