package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.stc.echannels.epayments.model.PaymentChannelSr;
import com.stc.echannels.epayments.model.PaymentChannelSrModel;
import com.stc.echannels.epayments.model.PaymentChannelSrSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PaymentChannelSr service. Represents a row in the &quot;PAYMENT_CHANNEL_SERVICES_MAP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.PaymentChannelSrModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentChannelSrImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see PaymentChannelSrImpl
 * @see com.stc.echannels.epayments.model.PaymentChannelSr
 * @see com.stc.echannels.epayments.model.PaymentChannelSrModel
 * @generated
 */
@JSON(strict = true)
public class PaymentChannelSrModelImpl extends BaseModelImpl<PaymentChannelSr>
    implements PaymentChannelSrModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a payment channel sr model instance should use the {@link com.stc.echannels.epayments.model.PaymentChannelSr} interface instead.
     */
    public static final String TABLE_NAME = "PAYMENT_CHANNEL_SERVICES_MAP";
    public static final Object[][] TABLE_COLUMNS = {
            { "CHANNEL_ID", Types.BIGINT },
            { "SERVICE_ID", Types.BIGINT },
            { "ID", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table PAYMENT_CHANNEL_SERVICES_MAP (CHANNEL_ID LONG,SERVICE_ID LONG,ID VARCHAR(75) not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table PAYMENT_CHANNEL_SERVICES_MAP";
    public static final String ORDER_BY_JPQL = " ORDER BY paymentChannelSr.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PAYMENT_CHANNEL_SERVICES_MAP.ID ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.PaymentChannelSr"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.PaymentChannelSr"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.PaymentChannelSr"),
            true);
    public static long CHANNELID_COLUMN_BITMASK = 1L;
    public static long SERVICEID_COLUMN_BITMASK = 2L;
    public static long ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.PaymentChannelSr"));
    private static ClassLoader _classLoader = PaymentChannelSr.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PaymentChannelSr.class
        };
    private long _channelid;
    private long _originalChannelid;
    private boolean _setOriginalChannelid;
    private long _serviceid;
    private long _originalServiceid;
    private boolean _setOriginalServiceid;
    private String _id;
    private long _columnBitmask;
    private PaymentChannelSr _escapedModel;

    public PaymentChannelSrModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PaymentChannelSr toModel(PaymentChannelSrSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PaymentChannelSr model = new PaymentChannelSrImpl();

        model.setChannelid(soapModel.getChannelid());
        model.setServiceid(soapModel.getServiceid());
        model.setId(soapModel.getId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PaymentChannelSr> toModels(
        PaymentChannelSrSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PaymentChannelSr> models = new ArrayList<PaymentChannelSr>(soapModels.length);

        for (PaymentChannelSrSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PaymentChannelSr.class;
    }

    @Override
    public String getModelClassName() {
        return PaymentChannelSr.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("channelid", getChannelid());
        attributes.put("serviceid", getServiceid());
        attributes.put("id", getId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long channelid = (Long) attributes.get("channelid");

        if (channelid != null) {
            setChannelid(channelid);
        }

        Long serviceid = (Long) attributes.get("serviceid");

        if (serviceid != null) {
            setServiceid(serviceid);
        }

        String id = (String) attributes.get("id");

        if (id != null) {
            setId(id);
        }
    }

    @JSON
    @Override
    public long getChannelid() {
        return _channelid;
    }

    @Override
    public void setChannelid(long channelid) {
        _columnBitmask |= CHANNELID_COLUMN_BITMASK;

        if (!_setOriginalChannelid) {
            _setOriginalChannelid = true;

            _originalChannelid = _channelid;
        }

        _channelid = channelid;
    }

    public long getOriginalChannelid() {
        return _originalChannelid;
    }

    @JSON
    @Override
    public long getServiceid() {
        return _serviceid;
    }

    @Override
    public void setServiceid(long serviceid) {
        _columnBitmask |= SERVICEID_COLUMN_BITMASK;

        if (!_setOriginalServiceid) {
            _setOriginalServiceid = true;

            _originalServiceid = _serviceid;
        }

        _serviceid = serviceid;
    }

    public long getOriginalServiceid() {
        return _originalServiceid;
    }

    @JSON
    @Override
    public String getId() {
        if (_id == null) {
            return StringPool.BLANK;
        } else {
            return _id;
        }
    }

    @Override
    public void setId(String id) {
        _id = id;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PaymentChannelSr toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PaymentChannelSr) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PaymentChannelSrImpl paymentChannelSrImpl = new PaymentChannelSrImpl();

        paymentChannelSrImpl.setChannelid(getChannelid());
        paymentChannelSrImpl.setServiceid(getServiceid());
        paymentChannelSrImpl.setId(getId());

        paymentChannelSrImpl.resetOriginalValues();

        return paymentChannelSrImpl;
    }

    @Override
    public int compareTo(PaymentChannelSr paymentChannelSr) {
        String primaryKey = paymentChannelSr.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PaymentChannelSr)) {
            return false;
        }

        PaymentChannelSr paymentChannelSr = (PaymentChannelSr) obj;

        String primaryKey = paymentChannelSr.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PaymentChannelSrModelImpl paymentChannelSrModelImpl = this;

        paymentChannelSrModelImpl._originalChannelid = paymentChannelSrModelImpl._channelid;

        paymentChannelSrModelImpl._setOriginalChannelid = false;

        paymentChannelSrModelImpl._originalServiceid = paymentChannelSrModelImpl._serviceid;

        paymentChannelSrModelImpl._setOriginalServiceid = false;

        paymentChannelSrModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PaymentChannelSr> toCacheModel() {
        PaymentChannelSrCacheModel paymentChannelSrCacheModel = new PaymentChannelSrCacheModel();

        paymentChannelSrCacheModel.channelid = getChannelid();

        paymentChannelSrCacheModel.serviceid = getServiceid();

        paymentChannelSrCacheModel.id = getId();

        String id = paymentChannelSrCacheModel.id;

        if ((id != null) && (id.length() == 0)) {
            paymentChannelSrCacheModel.id = null;
        }

        return paymentChannelSrCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{channelid=");
        sb.append(getChannelid());
        sb.append(", serviceid=");
        sb.append(getServiceid());
        sb.append(", id=");
        sb.append(getId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.PaymentChannelSr");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>channelid</column-name><column-value><![CDATA[");
        sb.append(getChannelid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceid</column-name><column-value><![CDATA[");
        sb.append(getServiceid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
