package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.stc.echannels.epayments.model.PaymentMethod;
import com.stc.echannels.epayments.model.PaymentMethodModel;
import com.stc.echannels.epayments.model.PaymentMethodSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PaymentMethod service. Represents a row in the &quot;PAYMENT_METHODS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.PaymentMethodModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentMethodImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see PaymentMethodImpl
 * @see com.stc.echannels.epayments.model.PaymentMethod
 * @see com.stc.echannels.epayments.model.PaymentMethodModel
 * @generated
 */
@JSON(strict = true)
public class PaymentMethodModelImpl extends BaseModelImpl<PaymentMethod>
    implements PaymentMethodModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a payment method model instance should use the {@link com.stc.echannels.epayments.model.PaymentMethod} interface instead.
     */
    public static final String TABLE_NAME = "PAYMENT_METHODS";
    public static final Object[][] TABLE_COLUMNS = {
            { "PMT_METHOD_Id", Types.BIGINT },
            { "status", Types.VARCHAR },
            { "last_update_timestamp", Types.TIMESTAMP },
            { "last_update_userid", Types.VARCHAR },
            { "last_update_username", Types.VARCHAR },
            { "effective_timestamp", Types.TIMESTAMP },
            { "CLIENT_IP", Types.VARCHAR },
            { "SERVER_IP", Types.VARCHAR },
            { "USER_AGENT", Types.VARCHAR },
            { "OPERATION", Types.VARCHAR },
            { "DESCRIPTIVE_NAME_EN", Types.VARCHAR },
            { "DESCRIPTIVE_NAME_Ar", Types.VARCHAR },
            { "PMT_METHOD_ID_TYPE", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table PAYMENT_METHODS (PMT_METHOD_Id LONG not null primary key,status VARCHAR(75) null,last_update_timestamp DATE null,last_update_userid VARCHAR(75) null,last_update_username VARCHAR(75) null,effective_timestamp DATE null,CLIENT_IP VARCHAR(75) null,SERVER_IP VARCHAR(75) null,USER_AGENT VARCHAR(75) null,OPERATION VARCHAR(75) null,DESCRIPTIVE_NAME_EN VARCHAR(75) null,DESCRIPTIVE_NAME_Ar VARCHAR(75) null,PMT_METHOD_ID_TYPE VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table PAYMENT_METHODS";
    public static final String ORDER_BY_JPQL = " ORDER BY paymentMethod.pmtMethodId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PAYMENT_METHODS.PMT_METHOD_Id ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.PaymentMethod"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.PaymentMethod"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.PaymentMethod"),
            true);
    public static long PMTMETHODID_COLUMN_BITMASK = 1L;
    public static long PMTMETHODIDTYPE_COLUMN_BITMASK = 2L;
    public static long STATUS_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.PaymentMethod"));
    private static ClassLoader _classLoader = PaymentMethod.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PaymentMethod.class
        };
    private long _pmtMethodId;
    private long _originalPmtMethodId;
    private boolean _setOriginalPmtMethodId;
    private String _status;
    private String _originalStatus;
    private Date _lastUpdateTimestamp;
    private String _lastUpdateUserid;
    private String _lastUpdateUsername;
    private Date _effectiveTimestamp;
    private String _clientIp;
    private String _serverIp;
    private String _userAgent;
    private String _operation;
    private String _descriptiveNameEn;
    private String _descriptiveNameAr;
    private String _pmtMethodIdType;
    private String _originalPmtMethodIdType;
    private long _columnBitmask;
    private PaymentMethod _escapedModel;

    public PaymentMethodModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PaymentMethod toModel(PaymentMethodSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PaymentMethod model = new PaymentMethodImpl();

        model.setPmtMethodId(soapModel.getPmtMethodId());
        model.setStatus(soapModel.getStatus());
        model.setLastUpdateTimestamp(soapModel.getLastUpdateTimestamp());
        model.setLastUpdateUserid(soapModel.getLastUpdateUserid());
        model.setLastUpdateUsername(soapModel.getLastUpdateUsername());
        model.setEffectiveTimestamp(soapModel.getEffectiveTimestamp());
        model.setClientIp(soapModel.getClientIp());
        model.setServerIp(soapModel.getServerIp());
        model.setUserAgent(soapModel.getUserAgent());
        model.setOperation(soapModel.getOperation());
        model.setDescriptiveNameEn(soapModel.getDescriptiveNameEn());
        model.setDescriptiveNameAr(soapModel.getDescriptiveNameAr());
        model.setPmtMethodIdType(soapModel.getPmtMethodIdType());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PaymentMethod> toModels(PaymentMethodSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PaymentMethod> models = new ArrayList<PaymentMethod>(soapModels.length);

        for (PaymentMethodSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _pmtMethodId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPmtMethodId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _pmtMethodId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PaymentMethod.class;
    }

    @Override
    public String getModelClassName() {
        return PaymentMethod.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("pmtMethodId", getPmtMethodId());
        attributes.put("status", getStatus());
        attributes.put("lastUpdateTimestamp", getLastUpdateTimestamp());
        attributes.put("lastUpdateUserid", getLastUpdateUserid());
        attributes.put("lastUpdateUsername", getLastUpdateUsername());
        attributes.put("effectiveTimestamp", getEffectiveTimestamp());
        attributes.put("clientIp", getClientIp());
        attributes.put("serverIp", getServerIp());
        attributes.put("userAgent", getUserAgent());
        attributes.put("operation", getOperation());
        attributes.put("descriptiveNameEn", getDescriptiveNameEn());
        attributes.put("descriptiveNameAr", getDescriptiveNameAr());
        attributes.put("pmtMethodIdType", getPmtMethodIdType());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long pmtMethodId = (Long) attributes.get("pmtMethodId");

        if (pmtMethodId != null) {
            setPmtMethodId(pmtMethodId);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Date lastUpdateTimestamp = (Date) attributes.get("lastUpdateTimestamp");

        if (lastUpdateTimestamp != null) {
            setLastUpdateTimestamp(lastUpdateTimestamp);
        }

        String lastUpdateUserid = (String) attributes.get("lastUpdateUserid");

        if (lastUpdateUserid != null) {
            setLastUpdateUserid(lastUpdateUserid);
        }

        String lastUpdateUsername = (String) attributes.get(
                "lastUpdateUsername");

        if (lastUpdateUsername != null) {
            setLastUpdateUsername(lastUpdateUsername);
        }

        Date effectiveTimestamp = (Date) attributes.get("effectiveTimestamp");

        if (effectiveTimestamp != null) {
            setEffectiveTimestamp(effectiveTimestamp);
        }

        String clientIp = (String) attributes.get("clientIp");

        if (clientIp != null) {
            setClientIp(clientIp);
        }

        String serverIp = (String) attributes.get("serverIp");

        if (serverIp != null) {
            setServerIp(serverIp);
        }

        String userAgent = (String) attributes.get("userAgent");

        if (userAgent != null) {
            setUserAgent(userAgent);
        }

        String operation = (String) attributes.get("operation");

        if (operation != null) {
            setOperation(operation);
        }

        String descriptiveNameEn = (String) attributes.get("descriptiveNameEn");

        if (descriptiveNameEn != null) {
            setDescriptiveNameEn(descriptiveNameEn);
        }

        String descriptiveNameAr = (String) attributes.get("descriptiveNameAr");

        if (descriptiveNameAr != null) {
            setDescriptiveNameAr(descriptiveNameAr);
        }

        String pmtMethodIdType = (String) attributes.get("pmtMethodIdType");

        if (pmtMethodIdType != null) {
            setPmtMethodIdType(pmtMethodIdType);
        }
    }

    @JSON
    @Override
    public long getPmtMethodId() {
        return _pmtMethodId;
    }

    @Override
    public void setPmtMethodId(long pmtMethodId) {
        _columnBitmask = -1L;

        if (!_setOriginalPmtMethodId) {
            _setOriginalPmtMethodId = true;

            _originalPmtMethodId = _pmtMethodId;
        }

        _pmtMethodId = pmtMethodId;
    }

    public long getOriginalPmtMethodId() {
        return _originalPmtMethodId;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (_originalStatus == null) {
            _originalStatus = _status;
        }

        _status = status;
    }

    public String getOriginalStatus() {
        return GetterUtil.getString(_originalStatus);
    }

    @JSON
    @Override
    public Date getLastUpdateTimestamp() {
        return _lastUpdateTimestamp;
    }

    @Override
    public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
        _lastUpdateTimestamp = lastUpdateTimestamp;
    }

    @JSON
    @Override
    public String getLastUpdateUserid() {
        if (_lastUpdateUserid == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUserid;
        }
    }

    @Override
    public void setLastUpdateUserid(String lastUpdateUserid) {
        _lastUpdateUserid = lastUpdateUserid;
    }

    @JSON
    @Override
    public String getLastUpdateUsername() {
        if (_lastUpdateUsername == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUsername;
        }
    }

    @Override
    public void setLastUpdateUsername(String lastUpdateUsername) {
        _lastUpdateUsername = lastUpdateUsername;
    }

    @JSON
    @Override
    public Date getEffectiveTimestamp() {
        return _effectiveTimestamp;
    }

    @Override
    public void setEffectiveTimestamp(Date effectiveTimestamp) {
        _effectiveTimestamp = effectiveTimestamp;
    }

    @JSON
    @Override
    public String getClientIp() {
        if (_clientIp == null) {
            return StringPool.BLANK;
        } else {
            return _clientIp;
        }
    }

    @Override
    public void setClientIp(String clientIp) {
        _clientIp = clientIp;
    }

    @JSON
    @Override
    public String getServerIp() {
        if (_serverIp == null) {
            return StringPool.BLANK;
        } else {
            return _serverIp;
        }
    }

    @Override
    public void setServerIp(String serverIp) {
        _serverIp = serverIp;
    }

    @JSON
    @Override
    public String getUserAgent() {
        if (_userAgent == null) {
            return StringPool.BLANK;
        } else {
            return _userAgent;
        }
    }

    @Override
    public void setUserAgent(String userAgent) {
        _userAgent = userAgent;
    }

    @JSON
    @Override
    public String getOperation() {
        if (_operation == null) {
            return StringPool.BLANK;
        } else {
            return _operation;
        }
    }

    @Override
    public void setOperation(String operation) {
        _operation = operation;
    }

    @JSON
    @Override
    public String getDescriptiveNameEn() {
        if (_descriptiveNameEn == null) {
            return StringPool.BLANK;
        } else {
            return _descriptiveNameEn;
        }
    }

    @Override
    public void setDescriptiveNameEn(String descriptiveNameEn) {
        _descriptiveNameEn = descriptiveNameEn;
    }

    @JSON
    @Override
    public String getDescriptiveNameAr() {
        if (_descriptiveNameAr == null) {
            return StringPool.BLANK;
        } else {
            return _descriptiveNameAr;
        }
    }

    @Override
    public void setDescriptiveNameAr(String descriptiveNameAr) {
        _descriptiveNameAr = descriptiveNameAr;
    }

    @JSON
    @Override
    public String getPmtMethodIdType() {
        if (_pmtMethodIdType == null) {
            return StringPool.BLANK;
        } else {
            return _pmtMethodIdType;
        }
    }

    @Override
    public void setPmtMethodIdType(String pmtMethodIdType) {
        _columnBitmask |= PMTMETHODIDTYPE_COLUMN_BITMASK;

        if (_originalPmtMethodIdType == null) {
            _originalPmtMethodIdType = _pmtMethodIdType;
        }

        _pmtMethodIdType = pmtMethodIdType;
    }

    public String getOriginalPmtMethodIdType() {
        return GetterUtil.getString(_originalPmtMethodIdType);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PaymentMethod.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PaymentMethod toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PaymentMethod) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PaymentMethodImpl paymentMethodImpl = new PaymentMethodImpl();

        paymentMethodImpl.setPmtMethodId(getPmtMethodId());
        paymentMethodImpl.setStatus(getStatus());
        paymentMethodImpl.setLastUpdateTimestamp(getLastUpdateTimestamp());
        paymentMethodImpl.setLastUpdateUserid(getLastUpdateUserid());
        paymentMethodImpl.setLastUpdateUsername(getLastUpdateUsername());
        paymentMethodImpl.setEffectiveTimestamp(getEffectiveTimestamp());
        paymentMethodImpl.setClientIp(getClientIp());
        paymentMethodImpl.setServerIp(getServerIp());
        paymentMethodImpl.setUserAgent(getUserAgent());
        paymentMethodImpl.setOperation(getOperation());
        paymentMethodImpl.setDescriptiveNameEn(getDescriptiveNameEn());
        paymentMethodImpl.setDescriptiveNameAr(getDescriptiveNameAr());
        paymentMethodImpl.setPmtMethodIdType(getPmtMethodIdType());

        paymentMethodImpl.resetOriginalValues();

        return paymentMethodImpl;
    }

    @Override
    public int compareTo(PaymentMethod paymentMethod) {
        int value = 0;

        if (getPmtMethodId() < paymentMethod.getPmtMethodId()) {
            value = -1;
        } else if (getPmtMethodId() > paymentMethod.getPmtMethodId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PaymentMethod)) {
            return false;
        }

        PaymentMethod paymentMethod = (PaymentMethod) obj;

        long primaryKey = paymentMethod.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PaymentMethodModelImpl paymentMethodModelImpl = this;

        paymentMethodModelImpl._originalPmtMethodId = paymentMethodModelImpl._pmtMethodId;

        paymentMethodModelImpl._setOriginalPmtMethodId = false;

        paymentMethodModelImpl._originalStatus = paymentMethodModelImpl._status;

        paymentMethodModelImpl._originalPmtMethodIdType = paymentMethodModelImpl._pmtMethodIdType;

        paymentMethodModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PaymentMethod> toCacheModel() {
        PaymentMethodCacheModel paymentMethodCacheModel = new PaymentMethodCacheModel();

        paymentMethodCacheModel.pmtMethodId = getPmtMethodId();

        paymentMethodCacheModel.status = getStatus();

        String status = paymentMethodCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            paymentMethodCacheModel.status = null;
        }

        Date lastUpdateTimestamp = getLastUpdateTimestamp();

        if (lastUpdateTimestamp != null) {
            paymentMethodCacheModel.lastUpdateTimestamp = lastUpdateTimestamp.getTime();
        } else {
            paymentMethodCacheModel.lastUpdateTimestamp = Long.MIN_VALUE;
        }

        paymentMethodCacheModel.lastUpdateUserid = getLastUpdateUserid();

        String lastUpdateUserid = paymentMethodCacheModel.lastUpdateUserid;

        if ((lastUpdateUserid != null) && (lastUpdateUserid.length() == 0)) {
            paymentMethodCacheModel.lastUpdateUserid = null;
        }

        paymentMethodCacheModel.lastUpdateUsername = getLastUpdateUsername();

        String lastUpdateUsername = paymentMethodCacheModel.lastUpdateUsername;

        if ((lastUpdateUsername != null) && (lastUpdateUsername.length() == 0)) {
            paymentMethodCacheModel.lastUpdateUsername = null;
        }

        Date effectiveTimestamp = getEffectiveTimestamp();

        if (effectiveTimestamp != null) {
            paymentMethodCacheModel.effectiveTimestamp = effectiveTimestamp.getTime();
        } else {
            paymentMethodCacheModel.effectiveTimestamp = Long.MIN_VALUE;
        }

        paymentMethodCacheModel.clientIp = getClientIp();

        String clientIp = paymentMethodCacheModel.clientIp;

        if ((clientIp != null) && (clientIp.length() == 0)) {
            paymentMethodCacheModel.clientIp = null;
        }

        paymentMethodCacheModel.serverIp = getServerIp();

        String serverIp = paymentMethodCacheModel.serverIp;

        if ((serverIp != null) && (serverIp.length() == 0)) {
            paymentMethodCacheModel.serverIp = null;
        }

        paymentMethodCacheModel.userAgent = getUserAgent();

        String userAgent = paymentMethodCacheModel.userAgent;

        if ((userAgent != null) && (userAgent.length() == 0)) {
            paymentMethodCacheModel.userAgent = null;
        }

        paymentMethodCacheModel.operation = getOperation();

        String operation = paymentMethodCacheModel.operation;

        if ((operation != null) && (operation.length() == 0)) {
            paymentMethodCacheModel.operation = null;
        }

        paymentMethodCacheModel.descriptiveNameEn = getDescriptiveNameEn();

        String descriptiveNameEn = paymentMethodCacheModel.descriptiveNameEn;

        if ((descriptiveNameEn != null) && (descriptiveNameEn.length() == 0)) {
            paymentMethodCacheModel.descriptiveNameEn = null;
        }

        paymentMethodCacheModel.descriptiveNameAr = getDescriptiveNameAr();

        String descriptiveNameAr = paymentMethodCacheModel.descriptiveNameAr;

        if ((descriptiveNameAr != null) && (descriptiveNameAr.length() == 0)) {
            paymentMethodCacheModel.descriptiveNameAr = null;
        }

        paymentMethodCacheModel.pmtMethodIdType = getPmtMethodIdType();

        String pmtMethodIdType = paymentMethodCacheModel.pmtMethodIdType;

        if ((pmtMethodIdType != null) && (pmtMethodIdType.length() == 0)) {
            paymentMethodCacheModel.pmtMethodIdType = null;
        }

        return paymentMethodCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{pmtMethodId=");
        sb.append(getPmtMethodId());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", lastUpdateTimestamp=");
        sb.append(getLastUpdateTimestamp());
        sb.append(", lastUpdateUserid=");
        sb.append(getLastUpdateUserid());
        sb.append(", lastUpdateUsername=");
        sb.append(getLastUpdateUsername());
        sb.append(", effectiveTimestamp=");
        sb.append(getEffectiveTimestamp());
        sb.append(", clientIp=");
        sb.append(getClientIp());
        sb.append(", serverIp=");
        sb.append(getServerIp());
        sb.append(", userAgent=");
        sb.append(getUserAgent());
        sb.append(", operation=");
        sb.append(getOperation());
        sb.append(", descriptiveNameEn=");
        sb.append(getDescriptiveNameEn());
        sb.append(", descriptiveNameAr=");
        sb.append(getDescriptiveNameAr());
        sb.append(", pmtMethodIdType=");
        sb.append(getPmtMethodIdType());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.PaymentMethod");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>pmtMethodId</column-name><column-value><![CDATA[");
        sb.append(getPmtMethodId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateTimestamp</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUserid</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUserid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUsername</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUsername());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>effectiveTimestamp</column-name><column-value><![CDATA[");
        sb.append(getEffectiveTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clientIp</column-name><column-value><![CDATA[");
        sb.append(getClientIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serverIp</column-name><column-value><![CDATA[");
        sb.append(getServerIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userAgent</column-name><column-value><![CDATA[");
        sb.append(getUserAgent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>operation</column-name><column-value><![CDATA[");
        sb.append(getOperation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptiveNameEn</column-name><column-value><![CDATA[");
        sb.append(getDescriptiveNameEn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptiveNameAr</column-name><column-value><![CDATA[");
        sb.append(getDescriptiveNameAr());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtMethodIdType</column-name><column-value><![CDATA[");
        sb.append(getPmtMethodIdType());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
