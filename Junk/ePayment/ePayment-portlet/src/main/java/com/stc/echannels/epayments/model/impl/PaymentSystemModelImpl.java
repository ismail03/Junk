package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.stc.echannels.epayments.model.PaymentSystem;
import com.stc.echannels.epayments.model.PaymentSystemModel;
import com.stc.echannels.epayments.model.PaymentSystemSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PaymentSystem service. Represents a row in the &quot;PAYMENT_SYSTEMS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.PaymentSystemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentSystemImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see PaymentSystemImpl
 * @see com.stc.echannels.epayments.model.PaymentSystem
 * @see com.stc.echannels.epayments.model.PaymentSystemModel
 * @generated
 */
@JSON(strict = true)
public class PaymentSystemModelImpl extends BaseModelImpl<PaymentSystem>
    implements PaymentSystemModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a payment system model instance should use the {@link com.stc.echannels.epayments.model.PaymentSystem} interface instead.
     */
    public static final String TABLE_NAME = "PAYMENT_SYSTEMS";
    public static final Object[][] TABLE_COLUMNS = {
            { "IN_PAYMENT_SYSTEM", Types.BIGINT },
            { "last_update_timestamp", Types.TIMESTAMP },
            { "last_update_userid", Types.VARCHAR },
            { "last_update_username", Types.VARCHAR },
            { "active", Types.VARCHAR },
            { "effective_timestamp", Types.TIMESTAMP },
            { "system_name", Types.VARCHAR },
            { "date_format", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table PAYMENT_SYSTEMS (IN_PAYMENT_SYSTEM LONG not null primary key,last_update_timestamp DATE null,last_update_userid VARCHAR(75) null,last_update_username VARCHAR(75) null,active VARCHAR(75) null,effective_timestamp DATE null,system_name VARCHAR(75) null,date_format VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table PAYMENT_SYSTEMS";
    public static final String ORDER_BY_JPQL = " ORDER BY paymentSystem.paymentSystemId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PAYMENT_SYSTEMS.IN_PAYMENT_SYSTEM ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.PaymentSystem"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.PaymentSystem"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.PaymentSystem"),
            true);
    public static long ACTIVE_COLUMN_BITMASK = 1L;
    public static long PAYMENTSYSTEMID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.PaymentSystem"));
    private static ClassLoader _classLoader = PaymentSystem.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PaymentSystem.class
        };
    private long _paymentSystemId;
    private Date _lastUpdateTimestamp;
    private String _lastUpdateUserid;
    private String _lastUpdateUsername;
    private String _active;
    private String _originalActive;
    private Date _effectiveTimestamp;
    private String _systemName;
    private String _dateFormat;
    private long _columnBitmask;
    private PaymentSystem _escapedModel;

    public PaymentSystemModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PaymentSystem toModel(PaymentSystemSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PaymentSystem model = new PaymentSystemImpl();

        model.setPaymentSystemId(soapModel.getPaymentSystemId());
        model.setLastUpdateTimestamp(soapModel.getLastUpdateTimestamp());
        model.setLastUpdateUserid(soapModel.getLastUpdateUserid());
        model.setLastUpdateUsername(soapModel.getLastUpdateUsername());
        model.setActive(soapModel.getActive());
        model.setEffectiveTimestamp(soapModel.getEffectiveTimestamp());
        model.setSystemName(soapModel.getSystemName());
        model.setDateFormat(soapModel.getDateFormat());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PaymentSystem> toModels(PaymentSystemSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PaymentSystem> models = new ArrayList<PaymentSystem>(soapModels.length);

        for (PaymentSystemSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _paymentSystemId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPaymentSystemId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _paymentSystemId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PaymentSystem.class;
    }

    @Override
    public String getModelClassName() {
        return PaymentSystem.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("paymentSystemId", getPaymentSystemId());
        attributes.put("lastUpdateTimestamp", getLastUpdateTimestamp());
        attributes.put("lastUpdateUserid", getLastUpdateUserid());
        attributes.put("lastUpdateUsername", getLastUpdateUsername());
        attributes.put("active", getActive());
        attributes.put("effectiveTimestamp", getEffectiveTimestamp());
        attributes.put("systemName", getSystemName());
        attributes.put("dateFormat", getDateFormat());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long paymentSystemId = (Long) attributes.get("paymentSystemId");

        if (paymentSystemId != null) {
            setPaymentSystemId(paymentSystemId);
        }

        Date lastUpdateTimestamp = (Date) attributes.get("lastUpdateTimestamp");

        if (lastUpdateTimestamp != null) {
            setLastUpdateTimestamp(lastUpdateTimestamp);
        }

        String lastUpdateUserid = (String) attributes.get("lastUpdateUserid");

        if (lastUpdateUserid != null) {
            setLastUpdateUserid(lastUpdateUserid);
        }

        String lastUpdateUsername = (String) attributes.get(
                "lastUpdateUsername");

        if (lastUpdateUsername != null) {
            setLastUpdateUsername(lastUpdateUsername);
        }

        String active = (String) attributes.get("active");

        if (active != null) {
            setActive(active);
        }

        Date effectiveTimestamp = (Date) attributes.get("effectiveTimestamp");

        if (effectiveTimestamp != null) {
            setEffectiveTimestamp(effectiveTimestamp);
        }

        String systemName = (String) attributes.get("systemName");

        if (systemName != null) {
            setSystemName(systemName);
        }

        String dateFormat = (String) attributes.get("dateFormat");

        if (dateFormat != null) {
            setDateFormat(dateFormat);
        }
    }

    @JSON
    @Override
    public long getPaymentSystemId() {
        return _paymentSystemId;
    }

    @Override
    public void setPaymentSystemId(long paymentSystemId) {
        _columnBitmask = -1L;

        _paymentSystemId = paymentSystemId;
    }

    @JSON
    @Override
    public Date getLastUpdateTimestamp() {
        return _lastUpdateTimestamp;
    }

    @Override
    public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
        _lastUpdateTimestamp = lastUpdateTimestamp;
    }

    @JSON
    @Override
    public String getLastUpdateUserid() {
        if (_lastUpdateUserid == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUserid;
        }
    }

    @Override
    public void setLastUpdateUserid(String lastUpdateUserid) {
        _lastUpdateUserid = lastUpdateUserid;
    }

    @JSON
    @Override
    public String getLastUpdateUsername() {
        if (_lastUpdateUsername == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUsername;
        }
    }

    @Override
    public void setLastUpdateUsername(String lastUpdateUsername) {
        _lastUpdateUsername = lastUpdateUsername;
    }

    @JSON
    @Override
    public String getActive() {
        if (_active == null) {
            return StringPool.BLANK;
        } else {
            return _active;
        }
    }

    @Override
    public void setActive(String active) {
        _columnBitmask |= ACTIVE_COLUMN_BITMASK;

        if (_originalActive == null) {
            _originalActive = _active;
        }

        _active = active;
    }

    public String getOriginalActive() {
        return GetterUtil.getString(_originalActive);
    }

    @JSON
    @Override
    public Date getEffectiveTimestamp() {
        return _effectiveTimestamp;
    }

    @Override
    public void setEffectiveTimestamp(Date effectiveTimestamp) {
        _effectiveTimestamp = effectiveTimestamp;
    }

    @JSON
    @Override
    public String getSystemName() {
        if (_systemName == null) {
            return StringPool.BLANK;
        } else {
            return _systemName;
        }
    }

    @Override
    public void setSystemName(String systemName) {
        _systemName = systemName;
    }

    @JSON
    @Override
    public String getDateFormat() {
        if (_dateFormat == null) {
            return StringPool.BLANK;
        } else {
            return _dateFormat;
        }
    }

    @Override
    public void setDateFormat(String dateFormat) {
        _dateFormat = dateFormat;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PaymentSystem.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PaymentSystem toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PaymentSystem) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PaymentSystemImpl paymentSystemImpl = new PaymentSystemImpl();

        paymentSystemImpl.setPaymentSystemId(getPaymentSystemId());
        paymentSystemImpl.setLastUpdateTimestamp(getLastUpdateTimestamp());
        paymentSystemImpl.setLastUpdateUserid(getLastUpdateUserid());
        paymentSystemImpl.setLastUpdateUsername(getLastUpdateUsername());
        paymentSystemImpl.setActive(getActive());
        paymentSystemImpl.setEffectiveTimestamp(getEffectiveTimestamp());
        paymentSystemImpl.setSystemName(getSystemName());
        paymentSystemImpl.setDateFormat(getDateFormat());

        paymentSystemImpl.resetOriginalValues();

        return paymentSystemImpl;
    }

    @Override
    public int compareTo(PaymentSystem paymentSystem) {
        int value = 0;

        if (getPaymentSystemId() < paymentSystem.getPaymentSystemId()) {
            value = -1;
        } else if (getPaymentSystemId() > paymentSystem.getPaymentSystemId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PaymentSystem)) {
            return false;
        }

        PaymentSystem paymentSystem = (PaymentSystem) obj;

        long primaryKey = paymentSystem.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PaymentSystemModelImpl paymentSystemModelImpl = this;

        paymentSystemModelImpl._originalActive = paymentSystemModelImpl._active;

        paymentSystemModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PaymentSystem> toCacheModel() {
        PaymentSystemCacheModel paymentSystemCacheModel = new PaymentSystemCacheModel();

        paymentSystemCacheModel.paymentSystemId = getPaymentSystemId();

        Date lastUpdateTimestamp = getLastUpdateTimestamp();

        if (lastUpdateTimestamp != null) {
            paymentSystemCacheModel.lastUpdateTimestamp = lastUpdateTimestamp.getTime();
        } else {
            paymentSystemCacheModel.lastUpdateTimestamp = Long.MIN_VALUE;
        }

        paymentSystemCacheModel.lastUpdateUserid = getLastUpdateUserid();

        String lastUpdateUserid = paymentSystemCacheModel.lastUpdateUserid;

        if ((lastUpdateUserid != null) && (lastUpdateUserid.length() == 0)) {
            paymentSystemCacheModel.lastUpdateUserid = null;
        }

        paymentSystemCacheModel.lastUpdateUsername = getLastUpdateUsername();

        String lastUpdateUsername = paymentSystemCacheModel.lastUpdateUsername;

        if ((lastUpdateUsername != null) && (lastUpdateUsername.length() == 0)) {
            paymentSystemCacheModel.lastUpdateUsername = null;
        }

        paymentSystemCacheModel.active = getActive();

        String active = paymentSystemCacheModel.active;

        if ((active != null) && (active.length() == 0)) {
            paymentSystemCacheModel.active = null;
        }

        Date effectiveTimestamp = getEffectiveTimestamp();

        if (effectiveTimestamp != null) {
            paymentSystemCacheModel.effectiveTimestamp = effectiveTimestamp.getTime();
        } else {
            paymentSystemCacheModel.effectiveTimestamp = Long.MIN_VALUE;
        }

        paymentSystemCacheModel.systemName = getSystemName();

        String systemName = paymentSystemCacheModel.systemName;

        if ((systemName != null) && (systemName.length() == 0)) {
            paymentSystemCacheModel.systemName = null;
        }

        paymentSystemCacheModel.dateFormat = getDateFormat();

        String dateFormat = paymentSystemCacheModel.dateFormat;

        if ((dateFormat != null) && (dateFormat.length() == 0)) {
            paymentSystemCacheModel.dateFormat = null;
        }

        return paymentSystemCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{paymentSystemId=");
        sb.append(getPaymentSystemId());
        sb.append(", lastUpdateTimestamp=");
        sb.append(getLastUpdateTimestamp());
        sb.append(", lastUpdateUserid=");
        sb.append(getLastUpdateUserid());
        sb.append(", lastUpdateUsername=");
        sb.append(getLastUpdateUsername());
        sb.append(", active=");
        sb.append(getActive());
        sb.append(", effectiveTimestamp=");
        sb.append(getEffectiveTimestamp());
        sb.append(", systemName=");
        sb.append(getSystemName());
        sb.append(", dateFormat=");
        sb.append(getDateFormat());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.PaymentSystem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>paymentSystemId</column-name><column-value><![CDATA[");
        sb.append(getPaymentSystemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateTimestamp</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUserid</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUserid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUsername</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUsername());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>active</column-name><column-value><![CDATA[");
        sb.append(getActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>effectiveTimestamp</column-name><column-value><![CDATA[");
        sb.append(getEffectiveTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>systemName</column-name><column-value><![CDATA[");
        sb.append(getSystemName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateFormat</column-name><column-value><![CDATA[");
        sb.append(getDateFormat());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
