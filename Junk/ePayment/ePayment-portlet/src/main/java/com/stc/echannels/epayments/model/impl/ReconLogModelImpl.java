package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.stc.echannels.epayments.model.ReconLog;
import com.stc.echannels.epayments.model.ReconLogModel;
import com.stc.echannels.epayments.model.ReconLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ReconLog service. Represents a row in the &quot;SADAD_RECON_LOG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.ReconLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReconLogImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see ReconLogImpl
 * @see com.stc.echannels.epayments.model.ReconLog
 * @see com.stc.echannels.epayments.model.ReconLogModel
 * @generated
 */
@JSON(strict = true)
public class ReconLogModelImpl extends BaseModelImpl<ReconLog>
    implements ReconLogModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a recon log model instance should use the {@link com.stc.echannels.epayments.model.ReconLog} interface instead.
     */
    public static final String TABLE_NAME = "SADAD_RECON_LOG";
    public static final Object[][] TABLE_COLUMNS = {
            { "PMT_SYSTEM_TRANS_ID", Types.VARCHAR },
            { "BANK_TRANS_ID", Types.BIGINT },
            { "TRANS_AMT", Types.DOUBLE },
            { "PAYMENT_METHOD", Types.VARCHAR },
            { "PAYMENT_CHANNEL", Types.VARCHAR },
            { "PMT_BANK_ID", Types.VARCHAR },
            { "BANK_TRANS_DATE", Types.TIMESTAMP },
            { "BENEFICIARY_SERVICENO", Types.VARCHAR },
            { "SERVICE_ID", Types.BIGINT },
            { "PAYMENT_STATUS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table SADAD_RECON_LOG (PMT_SYSTEM_TRANS_ID VARCHAR(75) not null primary key,BANK_TRANS_ID LONG,TRANS_AMT DOUBLE,PAYMENT_METHOD VARCHAR(75) null,PAYMENT_CHANNEL VARCHAR(75) null,PMT_BANK_ID VARCHAR(75) null,BANK_TRANS_DATE DATE null,BENEFICIARY_SERVICENO VARCHAR(75) null,SERVICE_ID LONG,PAYMENT_STATUS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table SADAD_RECON_LOG";
    public static final String ORDER_BY_JPQL = " ORDER BY reconLog.paymentChannel ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SADAD_RECON_LOG.PAYMENT_CHANNEL ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.ReconLog"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.ReconLog"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.ReconLog"));
    private static ClassLoader _classLoader = ReconLog.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ReconLog.class
        };
    private String _paymentSystemTransId;
    private long _bankTransId;
    private double _transAmount;
    private String _paymentMethod;
    private String _paymentChannel;
    private String _pmtBankId;
    private Date _bankTransDate;
    private String _beneficiaryServiceNo;
    private long _serviceId;
    private String _paymentStatus;
    private ReconLog _escapedModel;

    public ReconLogModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ReconLog toModel(ReconLogSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ReconLog model = new ReconLogImpl();

        model.setPaymentSystemTransId(soapModel.getPaymentSystemTransId());
        model.setBankTransId(soapModel.getBankTransId());
        model.setTransAmount(soapModel.getTransAmount());
        model.setPaymentMethod(soapModel.getPaymentMethod());
        model.setPaymentChannel(soapModel.getPaymentChannel());
        model.setPmtBankId(soapModel.getPmtBankId());
        model.setBankTransDate(soapModel.getBankTransDate());
        model.setBeneficiaryServiceNo(soapModel.getBeneficiaryServiceNo());
        model.setServiceId(soapModel.getServiceId());
        model.setPaymentStatus(soapModel.getPaymentStatus());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ReconLog> toModels(ReconLogSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ReconLog> models = new ArrayList<ReconLog>(soapModels.length);

        for (ReconLogSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _paymentSystemTransId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setPaymentSystemTransId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _paymentSystemTransId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ReconLog.class;
    }

    @Override
    public String getModelClassName() {
        return ReconLog.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("paymentSystemTransId", getPaymentSystemTransId());
        attributes.put("bankTransId", getBankTransId());
        attributes.put("transAmount", getTransAmount());
        attributes.put("paymentMethod", getPaymentMethod());
        attributes.put("paymentChannel", getPaymentChannel());
        attributes.put("pmtBankId", getPmtBankId());
        attributes.put("bankTransDate", getBankTransDate());
        attributes.put("beneficiaryServiceNo", getBeneficiaryServiceNo());
        attributes.put("serviceId", getServiceId());
        attributes.put("paymentStatus", getPaymentStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String paymentSystemTransId = (String) attributes.get(
                "paymentSystemTransId");

        if (paymentSystemTransId != null) {
            setPaymentSystemTransId(paymentSystemTransId);
        }

        Long bankTransId = (Long) attributes.get("bankTransId");

        if (bankTransId != null) {
            setBankTransId(bankTransId);
        }

        Double transAmount = (Double) attributes.get("transAmount");

        if (transAmount != null) {
            setTransAmount(transAmount);
        }

        String paymentMethod = (String) attributes.get("paymentMethod");

        if (paymentMethod != null) {
            setPaymentMethod(paymentMethod);
        }

        String paymentChannel = (String) attributes.get("paymentChannel");

        if (paymentChannel != null) {
            setPaymentChannel(paymentChannel);
        }

        String pmtBankId = (String) attributes.get("pmtBankId");

        if (pmtBankId != null) {
            setPmtBankId(pmtBankId);
        }

        Date bankTransDate = (Date) attributes.get("bankTransDate");

        if (bankTransDate != null) {
            setBankTransDate(bankTransDate);
        }

        String beneficiaryServiceNo = (String) attributes.get(
                "beneficiaryServiceNo");

        if (beneficiaryServiceNo != null) {
            setBeneficiaryServiceNo(beneficiaryServiceNo);
        }

        Long serviceId = (Long) attributes.get("serviceId");

        if (serviceId != null) {
            setServiceId(serviceId);
        }

        String paymentStatus = (String) attributes.get("paymentStatus");

        if (paymentStatus != null) {
            setPaymentStatus(paymentStatus);
        }
    }

    @JSON
    @Override
    public String getPaymentSystemTransId() {
        if (_paymentSystemTransId == null) {
            return StringPool.BLANK;
        } else {
            return _paymentSystemTransId;
        }
    }

    @Override
    public void setPaymentSystemTransId(String paymentSystemTransId) {
        _paymentSystemTransId = paymentSystemTransId;
    }

    @JSON
    @Override
    public long getBankTransId() {
        return _bankTransId;
    }

    @Override
    public void setBankTransId(long bankTransId) {
        _bankTransId = bankTransId;
    }

    @JSON
    @Override
    public double getTransAmount() {
        return _transAmount;
    }

    @Override
    public void setTransAmount(double transAmount) {
        _transAmount = transAmount;
    }

    @JSON
    @Override
    public String getPaymentMethod() {
        if (_paymentMethod == null) {
            return StringPool.BLANK;
        } else {
            return _paymentMethod;
        }
    }

    @Override
    public void setPaymentMethod(String paymentMethod) {
        _paymentMethod = paymentMethod;
    }

    @JSON
    @Override
    public String getPaymentChannel() {
        if (_paymentChannel == null) {
            return StringPool.BLANK;
        } else {
            return _paymentChannel;
        }
    }

    @Override
    public void setPaymentChannel(String paymentChannel) {
        _paymentChannel = paymentChannel;
    }

    @JSON
    @Override
    public String getPmtBankId() {
        if (_pmtBankId == null) {
            return StringPool.BLANK;
        } else {
            return _pmtBankId;
        }
    }

    @Override
    public void setPmtBankId(String pmtBankId) {
        _pmtBankId = pmtBankId;
    }

    @JSON
    @Override
    public Date getBankTransDate() {
        return _bankTransDate;
    }

    @Override
    public void setBankTransDate(Date bankTransDate) {
        _bankTransDate = bankTransDate;
    }

    @JSON
    @Override
    public String getBeneficiaryServiceNo() {
        if (_beneficiaryServiceNo == null) {
            return StringPool.BLANK;
        } else {
            return _beneficiaryServiceNo;
        }
    }

    @Override
    public void setBeneficiaryServiceNo(String beneficiaryServiceNo) {
        _beneficiaryServiceNo = beneficiaryServiceNo;
    }

    @JSON
    @Override
    public long getServiceId() {
        return _serviceId;
    }

    @Override
    public void setServiceId(long serviceId) {
        _serviceId = serviceId;
    }

    @JSON
    @Override
    public String getPaymentStatus() {
        if (_paymentStatus == null) {
            return StringPool.BLANK;
        } else {
            return _paymentStatus;
        }
    }

    @Override
    public void setPaymentStatus(String paymentStatus) {
        _paymentStatus = paymentStatus;
    }

    @Override
    public ReconLog toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ReconLog) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ReconLogImpl reconLogImpl = new ReconLogImpl();

        reconLogImpl.setPaymentSystemTransId(getPaymentSystemTransId());
        reconLogImpl.setBankTransId(getBankTransId());
        reconLogImpl.setTransAmount(getTransAmount());
        reconLogImpl.setPaymentMethod(getPaymentMethod());
        reconLogImpl.setPaymentChannel(getPaymentChannel());
        reconLogImpl.setPmtBankId(getPmtBankId());
        reconLogImpl.setBankTransDate(getBankTransDate());
        reconLogImpl.setBeneficiaryServiceNo(getBeneficiaryServiceNo());
        reconLogImpl.setServiceId(getServiceId());
        reconLogImpl.setPaymentStatus(getPaymentStatus());

        reconLogImpl.resetOriginalValues();

        return reconLogImpl;
    }

    @Override
    public int compareTo(ReconLog reconLog) {
        int value = 0;

        value = getPaymentChannel().compareTo(reconLog.getPaymentChannel());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ReconLog)) {
            return false;
        }

        ReconLog reconLog = (ReconLog) obj;

        String primaryKey = reconLog.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ReconLog> toCacheModel() {
        ReconLogCacheModel reconLogCacheModel = new ReconLogCacheModel();

        reconLogCacheModel.paymentSystemTransId = getPaymentSystemTransId();

        String paymentSystemTransId = reconLogCacheModel.paymentSystemTransId;

        if ((paymentSystemTransId != null) &&
                (paymentSystemTransId.length() == 0)) {
            reconLogCacheModel.paymentSystemTransId = null;
        }

        reconLogCacheModel.bankTransId = getBankTransId();

        reconLogCacheModel.transAmount = getTransAmount();

        reconLogCacheModel.paymentMethod = getPaymentMethod();

        String paymentMethod = reconLogCacheModel.paymentMethod;

        if ((paymentMethod != null) && (paymentMethod.length() == 0)) {
            reconLogCacheModel.paymentMethod = null;
        }

        reconLogCacheModel.paymentChannel = getPaymentChannel();

        String paymentChannel = reconLogCacheModel.paymentChannel;

        if ((paymentChannel != null) && (paymentChannel.length() == 0)) {
            reconLogCacheModel.paymentChannel = null;
        }

        reconLogCacheModel.pmtBankId = getPmtBankId();

        String pmtBankId = reconLogCacheModel.pmtBankId;

        if ((pmtBankId != null) && (pmtBankId.length() == 0)) {
            reconLogCacheModel.pmtBankId = null;
        }

        Date bankTransDate = getBankTransDate();

        if (bankTransDate != null) {
            reconLogCacheModel.bankTransDate = bankTransDate.getTime();
        } else {
            reconLogCacheModel.bankTransDate = Long.MIN_VALUE;
        }

        reconLogCacheModel.beneficiaryServiceNo = getBeneficiaryServiceNo();

        String beneficiaryServiceNo = reconLogCacheModel.beneficiaryServiceNo;

        if ((beneficiaryServiceNo != null) &&
                (beneficiaryServiceNo.length() == 0)) {
            reconLogCacheModel.beneficiaryServiceNo = null;
        }

        reconLogCacheModel.serviceId = getServiceId();

        reconLogCacheModel.paymentStatus = getPaymentStatus();

        String paymentStatus = reconLogCacheModel.paymentStatus;

        if ((paymentStatus != null) && (paymentStatus.length() == 0)) {
            reconLogCacheModel.paymentStatus = null;
        }

        return reconLogCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{paymentSystemTransId=");
        sb.append(getPaymentSystemTransId());
        sb.append(", bankTransId=");
        sb.append(getBankTransId());
        sb.append(", transAmount=");
        sb.append(getTransAmount());
        sb.append(", paymentMethod=");
        sb.append(getPaymentMethod());
        sb.append(", paymentChannel=");
        sb.append(getPaymentChannel());
        sb.append(", pmtBankId=");
        sb.append(getPmtBankId());
        sb.append(", bankTransDate=");
        sb.append(getBankTransDate());
        sb.append(", beneficiaryServiceNo=");
        sb.append(getBeneficiaryServiceNo());
        sb.append(", serviceId=");
        sb.append(getServiceId());
        sb.append(", paymentStatus=");
        sb.append(getPaymentStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.ReconLog");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>paymentSystemTransId</column-name><column-value><![CDATA[");
        sb.append(getPaymentSystemTransId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bankTransId</column-name><column-value><![CDATA[");
        sb.append(getBankTransId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transAmount</column-name><column-value><![CDATA[");
        sb.append(getTransAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paymentMethod</column-name><column-value><![CDATA[");
        sb.append(getPaymentMethod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paymentChannel</column-name><column-value><![CDATA[");
        sb.append(getPaymentChannel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtBankId</column-name><column-value><![CDATA[");
        sb.append(getPmtBankId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bankTransDate</column-name><column-value><![CDATA[");
        sb.append(getBankTransDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>beneficiaryServiceNo</column-name><column-value><![CDATA[");
        sb.append(getBeneficiaryServiceNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceId</column-name><column-value><![CDATA[");
        sb.append(getServiceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paymentStatus</column-name><column-value><![CDATA[");
        sb.append(getPaymentStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
