/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.stc.echannels.epayments.model.Service;
import com.stc.echannels.epayments.model.ServiceModel;
import com.stc.echannels.epayments.model.ServiceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Service service. Represents a row in the &quot;SERVICES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.ServiceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see ServiceImpl
 * @see com.stc.echannels.epayments.model.Service
 * @see com.stc.echannels.epayments.model.ServiceModel
 * @generated
 */
@JSON(strict = true)
public class ServiceModelImpl extends BaseModelImpl<Service>
	implements ServiceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service model instance should use the {@link com.stc.echannels.epayments.model.Service} interface instead.
	 */
	public static final String TABLE_NAME = "SERVICES";
	public static final Object[][] TABLE_COLUMNS = {
			{ "service_Id", Types.BIGINT },
			{ "last_update_timsetamp", Types.TIMESTAMP },
			{ "last_update_userid", Types.VARCHAR },
			{ "last_update_username", Types.VARCHAR },
			{ "active", Types.BIGINT },
			{ "effective_timestamp", Types.TIMESTAMP },
			{ "service_name", Types.VARCHAR },
			{ "descriptive_name_en", Types.VARCHAR },
			{ "descriptive_name_ar", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SERVICES (service_Id LONG not null primary key,last_update_timsetamp DATE null,last_update_userid VARCHAR(75) null,last_update_username VARCHAR(75) null,active LONG,effective_timestamp DATE null,service_name VARCHAR(75) null,descriptive_name_en VARCHAR(75) null,descriptive_name_ar VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SERVICES";
	public static final String ORDER_BY_JPQL = " ORDER BY service.serviceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SERVICES.service_Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.stc.echannels.epayments.model.Service"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.stc.echannels.epayments.model.Service"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Service toModel(ServiceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Service model = new ServiceImpl();

		model.setServiceId(soapModel.getServiceId());
		model.setLastUpdateTimestamp(soapModel.getLastUpdateTimestamp());
		model.setLastUpdateUserid(soapModel.getLastUpdateUserid());
		model.setLastUpdateUsername(soapModel.getLastUpdateUsername());
		model.setActive(soapModel.getActive());
		model.setEffectiveTimestamp(soapModel.getEffectiveTimestamp());
		model.setServiceName(soapModel.getServiceName());
		model.setDescriptiveNameEn(soapModel.getDescriptiveNameEn());
		model.setDescriptiveNameAr(soapModel.getDescriptiveNameAr());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Service> toModels(ServiceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Service> models = new ArrayList<Service>(soapModels.length);

		for (ServiceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.stc.echannels.epayments.model.Service"));

	public ServiceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _serviceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setServiceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _serviceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Service.class;
	}

	@Override
	public String getModelClassName() {
		return Service.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("serviceId", getServiceId());
		attributes.put("lastUpdateTimestamp", getLastUpdateTimestamp());
		attributes.put("lastUpdateUserid", getLastUpdateUserid());
		attributes.put("lastUpdateUsername", getLastUpdateUsername());
		attributes.put("active", getActive());
		attributes.put("effectiveTimestamp", getEffectiveTimestamp());
		attributes.put("serviceName", getServiceName());
		attributes.put("descriptiveNameEn", getDescriptiveNameEn());
		attributes.put("descriptiveNameAr", getDescriptiveNameAr());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long serviceId = (Long)attributes.get("serviceId");

		if (serviceId != null) {
			setServiceId(serviceId);
		}

		Date lastUpdateTimestamp = (Date)attributes.get("lastUpdateTimestamp");

		if (lastUpdateTimestamp != null) {
			setLastUpdateTimestamp(lastUpdateTimestamp);
		}

		String lastUpdateUserid = (String)attributes.get("lastUpdateUserid");

		if (lastUpdateUserid != null) {
			setLastUpdateUserid(lastUpdateUserid);
		}

		String lastUpdateUsername = (String)attributes.get("lastUpdateUsername");

		if (lastUpdateUsername != null) {
			setLastUpdateUsername(lastUpdateUsername);
		}

		Long active = (Long)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Date effectiveTimestamp = (Date)attributes.get("effectiveTimestamp");

		if (effectiveTimestamp != null) {
			setEffectiveTimestamp(effectiveTimestamp);
		}

		String serviceName = (String)attributes.get("serviceName");

		if (serviceName != null) {
			setServiceName(serviceName);
		}

		String descriptiveNameEn = (String)attributes.get("descriptiveNameEn");

		if (descriptiveNameEn != null) {
			setDescriptiveNameEn(descriptiveNameEn);
		}

		String descriptiveNameAr = (String)attributes.get("descriptiveNameAr");

		if (descriptiveNameAr != null) {
			setDescriptiveNameAr(descriptiveNameAr);
		}
	}

	@JSON
	@Override
	public long getServiceId() {
		return _serviceId;
	}

	@Override
	public void setServiceId(long serviceId) {
		_serviceId = serviceId;
	}

	@JSON
	@Override
	public Date getLastUpdateTimestamp() {
		return _lastUpdateTimestamp;
	}

	@Override
	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		_lastUpdateTimestamp = lastUpdateTimestamp;
	}

	@JSON
	@Override
	public String getLastUpdateUserid() {
		if (_lastUpdateUserid == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdateUserid;
		}
	}

	@Override
	public void setLastUpdateUserid(String lastUpdateUserid) {
		_lastUpdateUserid = lastUpdateUserid;
	}

	@JSON
	@Override
	public String getLastUpdateUsername() {
		if (_lastUpdateUsername == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdateUsername;
		}
	}

	@Override
	public void setLastUpdateUsername(String lastUpdateUsername) {
		_lastUpdateUsername = lastUpdateUsername;
	}

	@JSON
	@Override
	public long getActive() {
		return _active;
	}

	@Override
	public void setActive(long active) {
		_active = active;
	}

	@JSON
	@Override
	public Date getEffectiveTimestamp() {
		return _effectiveTimestamp;
	}

	@Override
	public void setEffectiveTimestamp(Date effectiveTimestamp) {
		_effectiveTimestamp = effectiveTimestamp;
	}

	@JSON
	@Override
	public String getServiceName() {
		if (_serviceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceName;
		}
	}

	@Override
	public void setServiceName(String serviceName) {
		_serviceName = serviceName;
	}

	@JSON
	@Override
	public String getDescriptiveNameEn() {
		if (_descriptiveNameEn == null) {
			return StringPool.BLANK;
		}
		else {
			return _descriptiveNameEn;
		}
	}

	@Override
	public void setDescriptiveNameEn(String descriptiveNameEn) {
		_descriptiveNameEn = descriptiveNameEn;
	}

	@JSON
	@Override
	public String getDescriptiveNameAr() {
		if (_descriptiveNameAr == null) {
			return StringPool.BLANK;
		}
		else {
			return _descriptiveNameAr;
		}
	}

	@Override
	public void setDescriptiveNameAr(String descriptiveNameAr) {
		_descriptiveNameAr = descriptiveNameAr;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Service.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Service toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Service)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceImpl serviceImpl = new ServiceImpl();

		serviceImpl.setServiceId(getServiceId());
		serviceImpl.setLastUpdateTimestamp(getLastUpdateTimestamp());
		serviceImpl.setLastUpdateUserid(getLastUpdateUserid());
		serviceImpl.setLastUpdateUsername(getLastUpdateUsername());
		serviceImpl.setActive(getActive());
		serviceImpl.setEffectiveTimestamp(getEffectiveTimestamp());
		serviceImpl.setServiceName(getServiceName());
		serviceImpl.setDescriptiveNameEn(getDescriptiveNameEn());
		serviceImpl.setDescriptiveNameAr(getDescriptiveNameAr());

		serviceImpl.resetOriginalValues();

		return serviceImpl;
	}

	@Override
	public int compareTo(Service service) {
		int value = 0;

		if (getServiceId() < service.getServiceId()) {
			value = -1;
		}
		else if (getServiceId() > service.getServiceId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Service)) {
			return false;
		}

		Service service = (Service)obj;

		long primaryKey = service.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Service> toCacheModel() {
		ServiceCacheModel serviceCacheModel = new ServiceCacheModel();

		serviceCacheModel.serviceId = getServiceId();

		Date lastUpdateTimestamp = getLastUpdateTimestamp();

		if (lastUpdateTimestamp != null) {
			serviceCacheModel.lastUpdateTimestamp = lastUpdateTimestamp.getTime();
		}
		else {
			serviceCacheModel.lastUpdateTimestamp = Long.MIN_VALUE;
		}

		serviceCacheModel.lastUpdateUserid = getLastUpdateUserid();

		String lastUpdateUserid = serviceCacheModel.lastUpdateUserid;

		if ((lastUpdateUserid != null) && (lastUpdateUserid.length() == 0)) {
			serviceCacheModel.lastUpdateUserid = null;
		}

		serviceCacheModel.lastUpdateUsername = getLastUpdateUsername();

		String lastUpdateUsername = serviceCacheModel.lastUpdateUsername;

		if ((lastUpdateUsername != null) && (lastUpdateUsername.length() == 0)) {
			serviceCacheModel.lastUpdateUsername = null;
		}

		serviceCacheModel.active = getActive();

		Date effectiveTimestamp = getEffectiveTimestamp();

		if (effectiveTimestamp != null) {
			serviceCacheModel.effectiveTimestamp = effectiveTimestamp.getTime();
		}
		else {
			serviceCacheModel.effectiveTimestamp = Long.MIN_VALUE;
		}

		serviceCacheModel.serviceName = getServiceName();

		String serviceName = serviceCacheModel.serviceName;

		if ((serviceName != null) && (serviceName.length() == 0)) {
			serviceCacheModel.serviceName = null;
		}

		serviceCacheModel.descriptiveNameEn = getDescriptiveNameEn();

		String descriptiveNameEn = serviceCacheModel.descriptiveNameEn;

		if ((descriptiveNameEn != null) && (descriptiveNameEn.length() == 0)) {
			serviceCacheModel.descriptiveNameEn = null;
		}

		serviceCacheModel.descriptiveNameAr = getDescriptiveNameAr();

		String descriptiveNameAr = serviceCacheModel.descriptiveNameAr;

		if ((descriptiveNameAr != null) && (descriptiveNameAr.length() == 0)) {
			serviceCacheModel.descriptiveNameAr = null;
		}

		return serviceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{serviceId=");
		sb.append(getServiceId());
		sb.append(", lastUpdateTimestamp=");
		sb.append(getLastUpdateTimestamp());
		sb.append(", lastUpdateUserid=");
		sb.append(getLastUpdateUserid());
		sb.append(", lastUpdateUsername=");
		sb.append(getLastUpdateUsername());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", effectiveTimestamp=");
		sb.append(getEffectiveTimestamp());
		sb.append(", serviceName=");
		sb.append(getServiceName());
		sb.append(", descriptiveNameEn=");
		sb.append(getDescriptiveNameEn());
		sb.append(", descriptiveNameAr=");
		sb.append(getDescriptiveNameAr());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.stc.echannels.epayments.model.Service");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>serviceId</column-name><column-value><![CDATA[");
		sb.append(getServiceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateTimestamp</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateTimestamp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateUserid</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateUserid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateUsername</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateUsername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveTimestamp</column-name><column-value><![CDATA[");
		sb.append(getEffectiveTimestamp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceName</column-name><column-value><![CDATA[");
		sb.append(getServiceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descriptiveNameEn</column-name><column-value><![CDATA[");
		sb.append(getDescriptiveNameEn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descriptiveNameAr</column-name><column-value><![CDATA[");
		sb.append(getDescriptiveNameAr());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Service.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Service.class
		};
	private long _serviceId;
	private Date _lastUpdateTimestamp;
	private String _lastUpdateUserid;
	private String _lastUpdateUsername;
	private long _active;
	private Date _effectiveTimestamp;
	private String _serviceName;
	private String _descriptiveNameEn;
	private String _descriptiveNameAr;
	private Service _escapedModel;
}