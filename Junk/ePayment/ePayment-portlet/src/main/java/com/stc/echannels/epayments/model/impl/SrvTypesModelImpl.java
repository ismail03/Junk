package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.stc.echannels.epayments.model.SrvTypes;
import com.stc.echannels.epayments.model.SrvTypesModel;
import com.stc.echannels.epayments.model.SrvTypesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SrvTypes service. Represents a row in the &quot;SERVICE_TYPES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.SrvTypesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SrvTypesImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see SrvTypesImpl
 * @see com.stc.echannels.epayments.model.SrvTypes
 * @see com.stc.echannels.epayments.model.SrvTypesModel
 * @generated
 */
@JSON(strict = true)
public class SrvTypesModelImpl extends BaseModelImpl<SrvTypes>
    implements SrvTypesModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a srv types model instance should use the {@link com.stc.echannels.epayments.model.SrvTypes} interface instead.
     */
    public static final String TABLE_NAME = "SERVICE_TYPES";
    public static final Object[][] TABLE_COLUMNS = {
            { "SERVICE_TYPE_ID", Types.BIGINT },
            { "SERVICE_TYPE_NAME", Types.VARCHAR },
            { "SERVICE_NAME_EN", Types.VARCHAR },
            { "SERVICE_NAME_AR", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table SERVICE_TYPES (SERVICE_TYPE_ID LONG not null primary key,SERVICE_TYPE_NAME VARCHAR(75) null,SERVICE_NAME_EN VARCHAR(75) null,SERVICE_NAME_AR VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table SERVICE_TYPES";
    public static final String ORDER_BY_JPQL = " ORDER BY srvTypes.serviceTypeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SERVICE_TYPES.SERVICE_TYPE_ID ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.SrvTypes"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.SrvTypes"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.SrvTypes"));
    private static ClassLoader _classLoader = SrvTypes.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SrvTypes.class
        };
    private long _serviceTypeId;
    private String _serviceTypeName;
    private String _serviceNameEN;
    private String _serviceNameAR;
    private SrvTypes _escapedModel;

    public SrvTypesModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SrvTypes toModel(SrvTypesSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        SrvTypes model = new SrvTypesImpl();

        model.setServiceTypeId(soapModel.getServiceTypeId());
        model.setServiceTypeName(soapModel.getServiceTypeName());
        model.setServiceNameEN(soapModel.getServiceNameEN());
        model.setServiceNameAR(soapModel.getServiceNameAR());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SrvTypes> toModels(SrvTypesSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<SrvTypes> models = new ArrayList<SrvTypes>(soapModels.length);

        for (SrvTypesSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _serviceTypeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setServiceTypeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _serviceTypeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SrvTypes.class;
    }

    @Override
    public String getModelClassName() {
        return SrvTypes.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("serviceTypeId", getServiceTypeId());
        attributes.put("serviceTypeName", getServiceTypeName());
        attributes.put("serviceNameEN", getServiceNameEN());
        attributes.put("serviceNameAR", getServiceNameAR());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long serviceTypeId = (Long) attributes.get("serviceTypeId");

        if (serviceTypeId != null) {
            setServiceTypeId(serviceTypeId);
        }

        String serviceTypeName = (String) attributes.get("serviceTypeName");

        if (serviceTypeName != null) {
            setServiceTypeName(serviceTypeName);
        }

        String serviceNameEN = (String) attributes.get("serviceNameEN");

        if (serviceNameEN != null) {
            setServiceNameEN(serviceNameEN);
        }

        String serviceNameAR = (String) attributes.get("serviceNameAR");

        if (serviceNameAR != null) {
            setServiceNameAR(serviceNameAR);
        }
    }

    @JSON
    @Override
    public long getServiceTypeId() {
        return _serviceTypeId;
    }

    @Override
    public void setServiceTypeId(long serviceTypeId) {
        _serviceTypeId = serviceTypeId;
    }

    @JSON
    @Override
    public String getServiceTypeName() {
        if (_serviceTypeName == null) {
            return StringPool.BLANK;
        } else {
            return _serviceTypeName;
        }
    }

    @Override
    public void setServiceTypeName(String serviceTypeName) {
        _serviceTypeName = serviceTypeName;
    }

    @JSON
    @Override
    public String getServiceNameEN() {
        if (_serviceNameEN == null) {
            return StringPool.BLANK;
        } else {
            return _serviceNameEN;
        }
    }

    @Override
    public void setServiceNameEN(String serviceNameEN) {
        _serviceNameEN = serviceNameEN;
    }

    @JSON
    @Override
    public String getServiceNameAR() {
        if (_serviceNameAR == null) {
            return StringPool.BLANK;
        } else {
            return _serviceNameAR;
        }
    }

    @Override
    public void setServiceNameAR(String serviceNameAR) {
        _serviceNameAR = serviceNameAR;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            SrvTypes.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SrvTypes toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SrvTypes) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SrvTypesImpl srvTypesImpl = new SrvTypesImpl();

        srvTypesImpl.setServiceTypeId(getServiceTypeId());
        srvTypesImpl.setServiceTypeName(getServiceTypeName());
        srvTypesImpl.setServiceNameEN(getServiceNameEN());
        srvTypesImpl.setServiceNameAR(getServiceNameAR());

        srvTypesImpl.resetOriginalValues();

        return srvTypesImpl;
    }

    @Override
    public int compareTo(SrvTypes srvTypes) {
        long primaryKey = srvTypes.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SrvTypes)) {
            return false;
        }

        SrvTypes srvTypes = (SrvTypes) obj;

        long primaryKey = srvTypes.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<SrvTypes> toCacheModel() {
        SrvTypesCacheModel srvTypesCacheModel = new SrvTypesCacheModel();

        srvTypesCacheModel.serviceTypeId = getServiceTypeId();

        srvTypesCacheModel.serviceTypeName = getServiceTypeName();

        String serviceTypeName = srvTypesCacheModel.serviceTypeName;

        if ((serviceTypeName != null) && (serviceTypeName.length() == 0)) {
            srvTypesCacheModel.serviceTypeName = null;
        }

        srvTypesCacheModel.serviceNameEN = getServiceNameEN();

        String serviceNameEN = srvTypesCacheModel.serviceNameEN;

        if ((serviceNameEN != null) && (serviceNameEN.length() == 0)) {
            srvTypesCacheModel.serviceNameEN = null;
        }

        srvTypesCacheModel.serviceNameAR = getServiceNameAR();

        String serviceNameAR = srvTypesCacheModel.serviceNameAR;

        if ((serviceNameAR != null) && (serviceNameAR.length() == 0)) {
            srvTypesCacheModel.serviceNameAR = null;
        }

        return srvTypesCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{serviceTypeId=");
        sb.append(getServiceTypeId());
        sb.append(", serviceTypeName=");
        sb.append(getServiceTypeName());
        sb.append(", serviceNameEN=");
        sb.append(getServiceNameEN());
        sb.append(", serviceNameAR=");
        sb.append(getServiceNameAR());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.SrvTypes");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>serviceTypeId</column-name><column-value><![CDATA[");
        sb.append(getServiceTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceTypeName</column-name><column-value><![CDATA[");
        sb.append(getServiceTypeName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceNameEN</column-name><column-value><![CDATA[");
        sb.append(getServiceNameEN());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceNameAR</column-name><column-value><![CDATA[");
        sb.append(getServiceNameAR());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
