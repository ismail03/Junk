package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.stc.echannels.epayments.model.Bank;
import com.stc.echannels.epayments.model.BankModel;
import com.stc.echannels.epayments.model.BankSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Bank service. Represents a row in the &quot;BANK_CODES_MAP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.BankModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BankImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see BankImpl
 * @see com.stc.echannels.epayments.model.Bank
 * @see com.stc.echannels.epayments.model.BankModel
 * @generated
 */
@JSON(strict = true)
public class BankModelImpl extends BaseModelImpl<Bank> implements BankModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a bank model instance should use the {@link com.stc.echannels.epayments.model.Bank} interface instead.
     */
    public static final String TABLE_NAME = "BANK_CODES_MAP";
    public static final Object[][] TABLE_COLUMNS = {
            { "TRANS_ID", Types.VARCHAR },
            { "last_update_timestamp", Types.TIMESTAMP },
            { "last_update_userid", Types.VARCHAR },
            { "last_update_username", Types.VARCHAR },
            { "active", Types.VARCHAR },
            { "effective_timestamp", Types.TIMESTAMP },
            { "status", Types.VARCHAR },
            { "CLIENT_IP", Types.VARCHAR },
            { "SERVER_IP", Types.VARCHAR },
            { "USER_AGENT", Types.VARCHAR },
            { "OPERATION", Types.VARCHAR },
            { "BANK_ID", Types.VARCHAR },
            { "STC_BANK_CODE", Types.VARCHAR },
            { "BANK_NAME_EN", Types.VARCHAR },
            { "BANK_NAME_AR", Types.VARCHAR },
            { "COMMENTS", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table BANK_CODES_MAP (TRANS_ID VARCHAR(75) not null primary key,last_update_timestamp DATE null,last_update_userid VARCHAR(75) null,last_update_username VARCHAR(75) null,active VARCHAR(75) null,effective_timestamp DATE null,status VARCHAR(75) null,CLIENT_IP VARCHAR(75) null,SERVER_IP VARCHAR(75) null,USER_AGENT VARCHAR(200) null,OPERATION VARCHAR(75) null,BANK_ID VARCHAR(75) null,STC_BANK_CODE VARCHAR(75) null,BANK_NAME_EN VARCHAR(75) null,BANK_NAME_AR VARCHAR(75) null,COMMENTS VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table BANK_CODES_MAP";
    public static final String ORDER_BY_JPQL = " ORDER BY bank.bankId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY BANK_CODES_MAP.BANK_ID ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.Bank"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.Bank"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.Bank"),
            true);
    public static long BANKID_COLUMN_BITMASK = 1L;
    public static long STATUS_COLUMN_BITMASK = 2L;
    public static long STCCODE_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.Bank"));
    private static ClassLoader _classLoader = Bank.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Bank.class };
    private String _transId;
    private Date _lastUpdateTimestamp;
    private String _lastUpdateUserid;
    private String _lastUpdateUsername;
    private String _active;
    private Date _effectiveTimestamp;
    private String _status;
    private String _originalStatus;
    private String _clientIp;
    private String _serverIp;
    private String _userAgent;
    private String _operation;
    private String _bankId;
    private String _originalBankId;
    private String _stcCode;
    private String _originalStcCode;
    private String _nameEn;
    private String _nameAr;
    private String _comments;
    private long _columnBitmask;
    private Bank _escapedModel;

    public BankModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Bank toModel(BankSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Bank model = new BankImpl();

        model.setTransId(soapModel.getTransId());
        model.setLastUpdateTimestamp(soapModel.getLastUpdateTimestamp());
        model.setLastUpdateUserid(soapModel.getLastUpdateUserid());
        model.setLastUpdateUsername(soapModel.getLastUpdateUsername());
        model.setActive(soapModel.getActive());
        model.setEffectiveTimestamp(soapModel.getEffectiveTimestamp());
        model.setStatus(soapModel.getStatus());
        model.setClientIp(soapModel.getClientIp());
        model.setServerIp(soapModel.getServerIp());
        model.setUserAgent(soapModel.getUserAgent());
        model.setOperation(soapModel.getOperation());
        model.setBankId(soapModel.getBankId());
        model.setStcCode(soapModel.getStcCode());
        model.setNameEn(soapModel.getNameEn());
        model.setNameAr(soapModel.getNameAr());
        model.setComments(soapModel.getComments());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Bank> toModels(BankSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Bank> models = new ArrayList<Bank>(soapModels.length);

        for (BankSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _transId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setTransId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _transId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Bank.class;
    }

    @Override
    public String getModelClassName() {
        return Bank.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("transId", getTransId());
        attributes.put("lastUpdateTimestamp", getLastUpdateTimestamp());
        attributes.put("lastUpdateUserid", getLastUpdateUserid());
        attributes.put("lastUpdateUsername", getLastUpdateUsername());
        attributes.put("active", getActive());
        attributes.put("effectiveTimestamp", getEffectiveTimestamp());
        attributes.put("status", getStatus());
        attributes.put("clientIp", getClientIp());
        attributes.put("serverIp", getServerIp());
        attributes.put("userAgent", getUserAgent());
        attributes.put("operation", getOperation());
        attributes.put("bankId", getBankId());
        attributes.put("stcCode", getStcCode());
        attributes.put("nameEn", getNameEn());
        attributes.put("nameAr", getNameAr());
        attributes.put("comments", getComments());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String transId = (String) attributes.get("transId");

        if (transId != null) {
            setTransId(transId);
        }

        Date lastUpdateTimestamp = (Date) attributes.get("lastUpdateTimestamp");

        if (lastUpdateTimestamp != null) {
            setLastUpdateTimestamp(lastUpdateTimestamp);
        }

        String lastUpdateUserid = (String) attributes.get("lastUpdateUserid");

        if (lastUpdateUserid != null) {
            setLastUpdateUserid(lastUpdateUserid);
        }

        String lastUpdateUsername = (String) attributes.get(
                "lastUpdateUsername");

        if (lastUpdateUsername != null) {
            setLastUpdateUsername(lastUpdateUsername);
        }

        String active = (String) attributes.get("active");

        if (active != null) {
            setActive(active);
        }

        Date effectiveTimestamp = (Date) attributes.get("effectiveTimestamp");

        if (effectiveTimestamp != null) {
            setEffectiveTimestamp(effectiveTimestamp);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String clientIp = (String) attributes.get("clientIp");

        if (clientIp != null) {
            setClientIp(clientIp);
        }

        String serverIp = (String) attributes.get("serverIp");

        if (serverIp != null) {
            setServerIp(serverIp);
        }

        String userAgent = (String) attributes.get("userAgent");

        if (userAgent != null) {
            setUserAgent(userAgent);
        }

        String operation = (String) attributes.get("operation");

        if (operation != null) {
            setOperation(operation);
        }

        String bankId = (String) attributes.get("bankId");

        if (bankId != null) {
            setBankId(bankId);
        }

        String stcCode = (String) attributes.get("stcCode");

        if (stcCode != null) {
            setStcCode(stcCode);
        }

        String nameEn = (String) attributes.get("nameEn");

        if (nameEn != null) {
            setNameEn(nameEn);
        }

        String nameAr = (String) attributes.get("nameAr");

        if (nameAr != null) {
            setNameAr(nameAr);
        }

        String comments = (String) attributes.get("comments");

        if (comments != null) {
            setComments(comments);
        }
    }

    @JSON
    @Override
    public String getTransId() {
        if (_transId == null) {
            return StringPool.BLANK;
        } else {
            return _transId;
        }
    }

    @Override
    public void setTransId(String transId) {
        _transId = transId;
    }

    @JSON
    @Override
    public Date getLastUpdateTimestamp() {
        return _lastUpdateTimestamp;
    }

    @Override
    public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
        _lastUpdateTimestamp = lastUpdateTimestamp;
    }

    @JSON
    @Override
    public String getLastUpdateUserid() {
        if (_lastUpdateUserid == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUserid;
        }
    }

    @Override
    public void setLastUpdateUserid(String lastUpdateUserid) {
        _lastUpdateUserid = lastUpdateUserid;
    }

    @JSON
    @Override
    public String getLastUpdateUsername() {
        if (_lastUpdateUsername == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUsername;
        }
    }

    @Override
    public void setLastUpdateUsername(String lastUpdateUsername) {
        _lastUpdateUsername = lastUpdateUsername;
    }

    @JSON
    @Override
    public String getActive() {
        if (_active == null) {
            return StringPool.BLANK;
        } else {
            return _active;
        }
    }

    @Override
    public void setActive(String active) {
        _active = active;
    }

    @JSON
    @Override
    public Date getEffectiveTimestamp() {
        return _effectiveTimestamp;
    }

    @Override
    public void setEffectiveTimestamp(Date effectiveTimestamp) {
        _effectiveTimestamp = effectiveTimestamp;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (_originalStatus == null) {
            _originalStatus = _status;
        }

        _status = status;
    }

    public String getOriginalStatus() {
        return GetterUtil.getString(_originalStatus);
    }

    @JSON
    @Override
    public String getClientIp() {
        if (_clientIp == null) {
            return StringPool.BLANK;
        } else {
            return _clientIp;
        }
    }

    @Override
    public void setClientIp(String clientIp) {
        _clientIp = clientIp;
    }

    @JSON
    @Override
    public String getServerIp() {
        if (_serverIp == null) {
            return StringPool.BLANK;
        } else {
            return _serverIp;
        }
    }

    @Override
    public void setServerIp(String serverIp) {
        _serverIp = serverIp;
    }

    @JSON
    @Override
    public String getUserAgent() {
        if (_userAgent == null) {
            return StringPool.BLANK;
        } else {
            return _userAgent;
        }
    }

    @Override
    public void setUserAgent(String userAgent) {
        _userAgent = userAgent;
    }

    @JSON
    @Override
    public String getOperation() {
        if (_operation == null) {
            return StringPool.BLANK;
        } else {
            return _operation;
        }
    }

    @Override
    public void setOperation(String operation) {
        _operation = operation;
    }

    @JSON
    @Override
    public String getBankId() {
        if (_bankId == null) {
            return StringPool.BLANK;
        } else {
            return _bankId;
        }
    }

    @Override
    public void setBankId(String bankId) {
        _columnBitmask = -1L;

        if (_originalBankId == null) {
            _originalBankId = _bankId;
        }

        _bankId = bankId;
    }

    public String getOriginalBankId() {
        return GetterUtil.getString(_originalBankId);
    }

    @JSON
    @Override
    public String getStcCode() {
        if (_stcCode == null) {
            return StringPool.BLANK;
        } else {
            return _stcCode;
        }
    }

    @Override
    public void setStcCode(String stcCode) {
        _columnBitmask |= STCCODE_COLUMN_BITMASK;

        if (_originalStcCode == null) {
            _originalStcCode = _stcCode;
        }

        _stcCode = stcCode;
    }

    public String getOriginalStcCode() {
        return GetterUtil.getString(_originalStcCode);
    }

    @JSON
    @Override
    public String getNameEn() {
        if (_nameEn == null) {
            return StringPool.BLANK;
        } else {
            return _nameEn;
        }
    }

    @Override
    public void setNameEn(String nameEn) {
        _nameEn = nameEn;
    }

    @JSON
    @Override
    public String getNameAr() {
        if (_nameAr == null) {
            return StringPool.BLANK;
        } else {
            return _nameAr;
        }
    }

    @Override
    public void setNameAr(String nameAr) {
        _nameAr = nameAr;
    }

    @JSON
    @Override
    public String getComments() {
        if (_comments == null) {
            return StringPool.BLANK;
        } else {
            return _comments;
        }
    }

    @Override
    public void setComments(String comments) {
        _comments = comments;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Bank toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Bank) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BankImpl bankImpl = new BankImpl();

        bankImpl.setTransId(getTransId());
        bankImpl.setLastUpdateTimestamp(getLastUpdateTimestamp());
        bankImpl.setLastUpdateUserid(getLastUpdateUserid());
        bankImpl.setLastUpdateUsername(getLastUpdateUsername());
        bankImpl.setActive(getActive());
        bankImpl.setEffectiveTimestamp(getEffectiveTimestamp());
        bankImpl.setStatus(getStatus());
        bankImpl.setClientIp(getClientIp());
        bankImpl.setServerIp(getServerIp());
        bankImpl.setUserAgent(getUserAgent());
        bankImpl.setOperation(getOperation());
        bankImpl.setBankId(getBankId());
        bankImpl.setStcCode(getStcCode());
        bankImpl.setNameEn(getNameEn());
        bankImpl.setNameAr(getNameAr());
        bankImpl.setComments(getComments());

        bankImpl.resetOriginalValues();

        return bankImpl;
    }

    @Override
    public int compareTo(Bank bank) {
        int value = 0;

        value = getBankId().compareTo(bank.getBankId());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Bank)) {
            return false;
        }

        Bank bank = (Bank) obj;

        String primaryKey = bank.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        BankModelImpl bankModelImpl = this;

        bankModelImpl._originalStatus = bankModelImpl._status;

        bankModelImpl._originalBankId = bankModelImpl._bankId;

        bankModelImpl._originalStcCode = bankModelImpl._stcCode;

        bankModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Bank> toCacheModel() {
        BankCacheModel bankCacheModel = new BankCacheModel();

        bankCacheModel.transId = getTransId();

        String transId = bankCacheModel.transId;

        if ((transId != null) && (transId.length() == 0)) {
            bankCacheModel.transId = null;
        }

        Date lastUpdateTimestamp = getLastUpdateTimestamp();

        if (lastUpdateTimestamp != null) {
            bankCacheModel.lastUpdateTimestamp = lastUpdateTimestamp.getTime();
        } else {
            bankCacheModel.lastUpdateTimestamp = Long.MIN_VALUE;
        }

        bankCacheModel.lastUpdateUserid = getLastUpdateUserid();

        String lastUpdateUserid = bankCacheModel.lastUpdateUserid;

        if ((lastUpdateUserid != null) && (lastUpdateUserid.length() == 0)) {
            bankCacheModel.lastUpdateUserid = null;
        }

        bankCacheModel.lastUpdateUsername = getLastUpdateUsername();

        String lastUpdateUsername = bankCacheModel.lastUpdateUsername;

        if ((lastUpdateUsername != null) && (lastUpdateUsername.length() == 0)) {
            bankCacheModel.lastUpdateUsername = null;
        }

        bankCacheModel.active = getActive();

        String active = bankCacheModel.active;

        if ((active != null) && (active.length() == 0)) {
            bankCacheModel.active = null;
        }

        Date effectiveTimestamp = getEffectiveTimestamp();

        if (effectiveTimestamp != null) {
            bankCacheModel.effectiveTimestamp = effectiveTimestamp.getTime();
        } else {
            bankCacheModel.effectiveTimestamp = Long.MIN_VALUE;
        }

        bankCacheModel.status = getStatus();

        String status = bankCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            bankCacheModel.status = null;
        }

        bankCacheModel.clientIp = getClientIp();

        String clientIp = bankCacheModel.clientIp;

        if ((clientIp != null) && (clientIp.length() == 0)) {
            bankCacheModel.clientIp = null;
        }

        bankCacheModel.serverIp = getServerIp();

        String serverIp = bankCacheModel.serverIp;

        if ((serverIp != null) && (serverIp.length() == 0)) {
            bankCacheModel.serverIp = null;
        }

        bankCacheModel.userAgent = getUserAgent();

        String userAgent = bankCacheModel.userAgent;

        if ((userAgent != null) && (userAgent.length() == 0)) {
            bankCacheModel.userAgent = null;
        }

        bankCacheModel.operation = getOperation();

        String operation = bankCacheModel.operation;

        if ((operation != null) && (operation.length() == 0)) {
            bankCacheModel.operation = null;
        }

        bankCacheModel.bankId = getBankId();

        String bankId = bankCacheModel.bankId;

        if ((bankId != null) && (bankId.length() == 0)) {
            bankCacheModel.bankId = null;
        }

        bankCacheModel.stcCode = getStcCode();

        String stcCode = bankCacheModel.stcCode;

        if ((stcCode != null) && (stcCode.length() == 0)) {
            bankCacheModel.stcCode = null;
        }

        bankCacheModel.nameEn = getNameEn();

        String nameEn = bankCacheModel.nameEn;

        if ((nameEn != null) && (nameEn.length() == 0)) {
            bankCacheModel.nameEn = null;
        }

        bankCacheModel.nameAr = getNameAr();

        String nameAr = bankCacheModel.nameAr;

        if ((nameAr != null) && (nameAr.length() == 0)) {
            bankCacheModel.nameAr = null;
        }

        bankCacheModel.comments = getComments();

        String comments = bankCacheModel.comments;

        if ((comments != null) && (comments.length() == 0)) {
            bankCacheModel.comments = null;
        }

        return bankCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{transId=");
        sb.append(getTransId());
        sb.append(", lastUpdateTimestamp=");
        sb.append(getLastUpdateTimestamp());
        sb.append(", lastUpdateUserid=");
        sb.append(getLastUpdateUserid());
        sb.append(", lastUpdateUsername=");
        sb.append(getLastUpdateUsername());
        sb.append(", active=");
        sb.append(getActive());
        sb.append(", effectiveTimestamp=");
        sb.append(getEffectiveTimestamp());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", clientIp=");
        sb.append(getClientIp());
        sb.append(", serverIp=");
        sb.append(getServerIp());
        sb.append(", userAgent=");
        sb.append(getUserAgent());
        sb.append(", operation=");
        sb.append(getOperation());
        sb.append(", bankId=");
        sb.append(getBankId());
        sb.append(", stcCode=");
        sb.append(getStcCode());
        sb.append(", nameEn=");
        sb.append(getNameEn());
        sb.append(", nameAr=");
        sb.append(getNameAr());
        sb.append(", comments=");
        sb.append(getComments());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.Bank");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>transId</column-name><column-value><![CDATA[");
        sb.append(getTransId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateTimestamp</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUserid</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUserid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUsername</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUsername());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>active</column-name><column-value><![CDATA[");
        sb.append(getActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>effectiveTimestamp</column-name><column-value><![CDATA[");
        sb.append(getEffectiveTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clientIp</column-name><column-value><![CDATA[");
        sb.append(getClientIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serverIp</column-name><column-value><![CDATA[");
        sb.append(getServerIp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userAgent</column-name><column-value><![CDATA[");
        sb.append(getUserAgent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>operation</column-name><column-value><![CDATA[");
        sb.append(getOperation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bankId</column-name><column-value><![CDATA[");
        sb.append(getBankId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stcCode</column-name><column-value><![CDATA[");
        sb.append(getStcCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nameEn</column-name><column-value><![CDATA[");
        sb.append(getNameEn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nameAr</column-name><column-value><![CDATA[");
        sb.append(getNameAr());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comments</column-name><column-value><![CDATA[");
        sb.append(getComments());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
