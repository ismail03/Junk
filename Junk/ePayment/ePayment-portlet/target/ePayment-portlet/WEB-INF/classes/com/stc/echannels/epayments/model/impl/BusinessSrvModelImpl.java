package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.stc.echannels.epayments.model.BusinessSrv;
import com.stc.echannels.epayments.model.BusinessSrvModel;
import com.stc.echannels.epayments.model.BusinessSrvSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BusinessSrv service. Represents a row in the &quot;SERVICES&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.BusinessSrvModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BusinessSrvImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see BusinessSrvImpl
 * @see com.stc.echannels.epayments.model.BusinessSrv
 * @see com.stc.echannels.epayments.model.BusinessSrvModel
 * @generated
 */
@JSON(strict = true)
public class BusinessSrvModelImpl extends BaseModelImpl<BusinessSrv>
    implements BusinessSrvModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a business srv model instance should use the {@link com.stc.echannels.epayments.model.BusinessSrv} interface instead.
     */
    public static final String TABLE_NAME = "SERVICES";
    public static final Object[][] TABLE_COLUMNS = {
            { "service_Id", Types.BIGINT },
            { "last_update_timestamp", Types.TIMESTAMP },
            { "last_update_userid", Types.VARCHAR },
            { "last_update_username", Types.VARCHAR },
            { "status", Types.VARCHAR },
            { "effective_timestamp", Types.TIMESTAMP },
            { "ref_mask", Types.VARCHAR },
            { "service_type", Types.VARCHAR },
            { "service_name_en", Types.VARCHAR },
            { "service_name_ar", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table SERVICES (service_Id LONG not null primary key,last_update_timestamp DATE null,last_update_userid VARCHAR(75) null,last_update_username VARCHAR(75) null,status VARCHAR(75) null,effective_timestamp DATE null,ref_mask VARCHAR(75) null,service_type VARCHAR(75) null,service_name_en VARCHAR(75) null,service_name_ar VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table SERVICES";
    public static final String ORDER_BY_JPQL = " ORDER BY businessSrv.serviceId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SERVICES.service_Id ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.BusinessSrv"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.BusinessSrv"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.BusinessSrv"),
            true);
    public static long STATUS_COLUMN_BITMASK = 1L;
    public static long SERVICEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.BusinessSrv"));
    private static ClassLoader _classLoader = BusinessSrv.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BusinessSrv.class
        };
    private long _serviceId;
    private Date _lastUpdateTimestamp;
    private String _lastUpdateUserid;
    private String _lastUpdateUsername;
    private String _status;
    private String _originalStatus;
    private Date _effectiveTimestamp;
    private String _refMask;
    private String _serviceType;
    private String _serviceNameEn;
    private String _serviceNameAr;
    private long _columnBitmask;
    private BusinessSrv _escapedModel;

    public BusinessSrvModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static BusinessSrv toModel(BusinessSrvSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        BusinessSrv model = new BusinessSrvImpl();

        model.setServiceId(soapModel.getServiceId());
        model.setLastUpdateTimestamp(soapModel.getLastUpdateTimestamp());
        model.setLastUpdateUserid(soapModel.getLastUpdateUserid());
        model.setLastUpdateUsername(soapModel.getLastUpdateUsername());
        model.setStatus(soapModel.getStatus());
        model.setEffectiveTimestamp(soapModel.getEffectiveTimestamp());
        model.setRefMask(soapModel.getRefMask());
        model.setServiceType(soapModel.getServiceType());
        model.setServiceNameEn(soapModel.getServiceNameEn());
        model.setServiceNameAr(soapModel.getServiceNameAr());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<BusinessSrv> toModels(BusinessSrvSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<BusinessSrv> models = new ArrayList<BusinessSrv>(soapModels.length);

        for (BusinessSrvSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _serviceId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setServiceId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _serviceId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return BusinessSrv.class;
    }

    @Override
    public String getModelClassName() {
        return BusinessSrv.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("serviceId", getServiceId());
        attributes.put("lastUpdateTimestamp", getLastUpdateTimestamp());
        attributes.put("lastUpdateUserid", getLastUpdateUserid());
        attributes.put("lastUpdateUsername", getLastUpdateUsername());
        attributes.put("status", getStatus());
        attributes.put("effectiveTimestamp", getEffectiveTimestamp());
        attributes.put("refMask", getRefMask());
        attributes.put("serviceType", getServiceType());
        attributes.put("serviceNameEn", getServiceNameEn());
        attributes.put("serviceNameAr", getServiceNameAr());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long serviceId = (Long) attributes.get("serviceId");

        if (serviceId != null) {
            setServiceId(serviceId);
        }

        Date lastUpdateTimestamp = (Date) attributes.get("lastUpdateTimestamp");

        if (lastUpdateTimestamp != null) {
            setLastUpdateTimestamp(lastUpdateTimestamp);
        }

        String lastUpdateUserid = (String) attributes.get("lastUpdateUserid");

        if (lastUpdateUserid != null) {
            setLastUpdateUserid(lastUpdateUserid);
        }

        String lastUpdateUsername = (String) attributes.get(
                "lastUpdateUsername");

        if (lastUpdateUsername != null) {
            setLastUpdateUsername(lastUpdateUsername);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Date effectiveTimestamp = (Date) attributes.get("effectiveTimestamp");

        if (effectiveTimestamp != null) {
            setEffectiveTimestamp(effectiveTimestamp);
        }

        String refMask = (String) attributes.get("refMask");

        if (refMask != null) {
            setRefMask(refMask);
        }

        String serviceType = (String) attributes.get("serviceType");

        if (serviceType != null) {
            setServiceType(serviceType);
        }

        String serviceNameEn = (String) attributes.get("serviceNameEn");

        if (serviceNameEn != null) {
            setServiceNameEn(serviceNameEn);
        }

        String serviceNameAr = (String) attributes.get("serviceNameAr");

        if (serviceNameAr != null) {
            setServiceNameAr(serviceNameAr);
        }
    }

    @JSON
    @Override
    public long getServiceId() {
        return _serviceId;
    }

    @Override
    public void setServiceId(long serviceId) {
        _columnBitmask = -1L;

        _serviceId = serviceId;
    }

    @JSON
    @Override
    public Date getLastUpdateTimestamp() {
        return _lastUpdateTimestamp;
    }

    @Override
    public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
        _lastUpdateTimestamp = lastUpdateTimestamp;
    }

    @JSON
    @Override
    public String getLastUpdateUserid() {
        if (_lastUpdateUserid == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUserid;
        }
    }

    @Override
    public void setLastUpdateUserid(String lastUpdateUserid) {
        _lastUpdateUserid = lastUpdateUserid;
    }

    @JSON
    @Override
    public String getLastUpdateUsername() {
        if (_lastUpdateUsername == null) {
            return StringPool.BLANK;
        } else {
            return _lastUpdateUsername;
        }
    }

    @Override
    public void setLastUpdateUsername(String lastUpdateUsername) {
        _lastUpdateUsername = lastUpdateUsername;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (_originalStatus == null) {
            _originalStatus = _status;
        }

        _status = status;
    }

    public String getOriginalStatus() {
        return GetterUtil.getString(_originalStatus);
    }

    @JSON
    @Override
    public Date getEffectiveTimestamp() {
        return _effectiveTimestamp;
    }

    @Override
    public void setEffectiveTimestamp(Date effectiveTimestamp) {
        _effectiveTimestamp = effectiveTimestamp;
    }

    @JSON
    @Override
    public String getRefMask() {
        if (_refMask == null) {
            return StringPool.BLANK;
        } else {
            return _refMask;
        }
    }

    @Override
    public void setRefMask(String refMask) {
        _refMask = refMask;
    }

    @JSON
    @Override
    public String getServiceType() {
        if (_serviceType == null) {
            return StringPool.BLANK;
        } else {
            return _serviceType;
        }
    }

    @Override
    public void setServiceType(String serviceType) {
        _serviceType = serviceType;
    }

    @JSON
    @Override
    public String getServiceNameEn() {
        if (_serviceNameEn == null) {
            return StringPool.BLANK;
        } else {
            return _serviceNameEn;
        }
    }

    @Override
    public void setServiceNameEn(String serviceNameEn) {
        _serviceNameEn = serviceNameEn;
    }

    @JSON
    @Override
    public String getServiceNameAr() {
        if (_serviceNameAr == null) {
            return StringPool.BLANK;
        } else {
            return _serviceNameAr;
        }
    }

    @Override
    public void setServiceNameAr(String serviceNameAr) {
        _serviceNameAr = serviceNameAr;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            BusinessSrv.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public BusinessSrv toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BusinessSrv) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BusinessSrvImpl businessSrvImpl = new BusinessSrvImpl();

        businessSrvImpl.setServiceId(getServiceId());
        businessSrvImpl.setLastUpdateTimestamp(getLastUpdateTimestamp());
        businessSrvImpl.setLastUpdateUserid(getLastUpdateUserid());
        businessSrvImpl.setLastUpdateUsername(getLastUpdateUsername());
        businessSrvImpl.setStatus(getStatus());
        businessSrvImpl.setEffectiveTimestamp(getEffectiveTimestamp());
        businessSrvImpl.setRefMask(getRefMask());
        businessSrvImpl.setServiceType(getServiceType());
        businessSrvImpl.setServiceNameEn(getServiceNameEn());
        businessSrvImpl.setServiceNameAr(getServiceNameAr());

        businessSrvImpl.resetOriginalValues();

        return businessSrvImpl;
    }

    @Override
    public int compareTo(BusinessSrv businessSrv) {
        int value = 0;

        if (getServiceId() < businessSrv.getServiceId()) {
            value = -1;
        } else if (getServiceId() > businessSrv.getServiceId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BusinessSrv)) {
            return false;
        }

        BusinessSrv businessSrv = (BusinessSrv) obj;

        long primaryKey = businessSrv.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        BusinessSrvModelImpl businessSrvModelImpl = this;

        businessSrvModelImpl._originalStatus = businessSrvModelImpl._status;

        businessSrvModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<BusinessSrv> toCacheModel() {
        BusinessSrvCacheModel businessSrvCacheModel = new BusinessSrvCacheModel();

        businessSrvCacheModel.serviceId = getServiceId();

        Date lastUpdateTimestamp = getLastUpdateTimestamp();

        if (lastUpdateTimestamp != null) {
            businessSrvCacheModel.lastUpdateTimestamp = lastUpdateTimestamp.getTime();
        } else {
            businessSrvCacheModel.lastUpdateTimestamp = Long.MIN_VALUE;
        }

        businessSrvCacheModel.lastUpdateUserid = getLastUpdateUserid();

        String lastUpdateUserid = businessSrvCacheModel.lastUpdateUserid;

        if ((lastUpdateUserid != null) && (lastUpdateUserid.length() == 0)) {
            businessSrvCacheModel.lastUpdateUserid = null;
        }

        businessSrvCacheModel.lastUpdateUsername = getLastUpdateUsername();

        String lastUpdateUsername = businessSrvCacheModel.lastUpdateUsername;

        if ((lastUpdateUsername != null) && (lastUpdateUsername.length() == 0)) {
            businessSrvCacheModel.lastUpdateUsername = null;
        }

        businessSrvCacheModel.status = getStatus();

        String status = businessSrvCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            businessSrvCacheModel.status = null;
        }

        Date effectiveTimestamp = getEffectiveTimestamp();

        if (effectiveTimestamp != null) {
            businessSrvCacheModel.effectiveTimestamp = effectiveTimestamp.getTime();
        } else {
            businessSrvCacheModel.effectiveTimestamp = Long.MIN_VALUE;
        }

        businessSrvCacheModel.refMask = getRefMask();

        String refMask = businessSrvCacheModel.refMask;

        if ((refMask != null) && (refMask.length() == 0)) {
            businessSrvCacheModel.refMask = null;
        }

        businessSrvCacheModel.serviceType = getServiceType();

        String serviceType = businessSrvCacheModel.serviceType;

        if ((serviceType != null) && (serviceType.length() == 0)) {
            businessSrvCacheModel.serviceType = null;
        }

        businessSrvCacheModel.serviceNameEn = getServiceNameEn();

        String serviceNameEn = businessSrvCacheModel.serviceNameEn;

        if ((serviceNameEn != null) && (serviceNameEn.length() == 0)) {
            businessSrvCacheModel.serviceNameEn = null;
        }

        businessSrvCacheModel.serviceNameAr = getServiceNameAr();

        String serviceNameAr = businessSrvCacheModel.serviceNameAr;

        if ((serviceNameAr != null) && (serviceNameAr.length() == 0)) {
            businessSrvCacheModel.serviceNameAr = null;
        }

        return businessSrvCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{serviceId=");
        sb.append(getServiceId());
        sb.append(", lastUpdateTimestamp=");
        sb.append(getLastUpdateTimestamp());
        sb.append(", lastUpdateUserid=");
        sb.append(getLastUpdateUserid());
        sb.append(", lastUpdateUsername=");
        sb.append(getLastUpdateUsername());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", effectiveTimestamp=");
        sb.append(getEffectiveTimestamp());
        sb.append(", refMask=");
        sb.append(getRefMask());
        sb.append(", serviceType=");
        sb.append(getServiceType());
        sb.append(", serviceNameEn=");
        sb.append(getServiceNameEn());
        sb.append(", serviceNameAr=");
        sb.append(getServiceNameAr());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.BusinessSrv");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>serviceId</column-name><column-value><![CDATA[");
        sb.append(getServiceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateTimestamp</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUserid</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUserid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastUpdateUsername</column-name><column-value><![CDATA[");
        sb.append(getLastUpdateUsername());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>effectiveTimestamp</column-name><column-value><![CDATA[");
        sb.append(getEffectiveTimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>refMask</column-name><column-value><![CDATA[");
        sb.append(getRefMask());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceType</column-name><column-value><![CDATA[");
        sb.append(getServiceType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceNameEn</column-name><column-value><![CDATA[");
        sb.append(getServiceNameEn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceNameAr</column-name><column-value><![CDATA[");
        sb.append(getServiceNameAr());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
