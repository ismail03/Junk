package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.stc.echannels.epayments.model.PaymentMethodSrvsMap;
import com.stc.echannels.epayments.model.PaymentMethodSrvsMapModel;
import com.stc.echannels.epayments.model.PaymentMethodSrvsMapSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PaymentMethodSrvsMap service. Represents a row in the &quot;PAYMENT_METHOD_SERVICES_MAP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.PaymentMethodSrvsMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentMethodSrvsMapImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see PaymentMethodSrvsMapImpl
 * @see com.stc.echannels.epayments.model.PaymentMethodSrvsMap
 * @see com.stc.echannels.epayments.model.PaymentMethodSrvsMapModel
 * @generated
 */
@JSON(strict = true)
public class PaymentMethodSrvsMapModelImpl extends BaseModelImpl<PaymentMethodSrvsMap>
    implements PaymentMethodSrvsMapModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a payment method srvs map model instance should use the {@link com.stc.echannels.epayments.model.PaymentMethodSrvsMap} interface instead.
     */
    public static final String TABLE_NAME = "PAYMENT_METHOD_SERVICES_MAP";
    public static final Object[][] TABLE_COLUMNS = {
            { "ID", Types.VARCHAR },
            { "SERVICE_ID", Types.BIGINT },
            { "PMT_METHOD_ID", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table PAYMENT_METHOD_SERVICES_MAP (ID VARCHAR(75) not null primary key,SERVICE_ID LONG,PMT_METHOD_ID LONG)";
    public static final String TABLE_SQL_DROP = "drop table PAYMENT_METHOD_SERVICES_MAP";
    public static final String ORDER_BY_JPQL = " ORDER BY paymentMethodSrvsMap.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PAYMENT_METHOD_SERVICES_MAP.ID ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.PaymentMethodSrvsMap"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.PaymentMethodSrvsMap"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.PaymentMethodSrvsMap"),
            true);
    public static long SERVICEID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.PaymentMethodSrvsMap"));
    private static ClassLoader _classLoader = PaymentMethodSrvsMap.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PaymentMethodSrvsMap.class
        };
    private String _id;
    private long _serviceId;
    private long _originalServiceId;
    private boolean _setOriginalServiceId;
    private long _paymentMethodId;
    private long _columnBitmask;
    private PaymentMethodSrvsMap _escapedModel;

    public PaymentMethodSrvsMapModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PaymentMethodSrvsMap toModel(
        PaymentMethodSrvsMapSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PaymentMethodSrvsMap model = new PaymentMethodSrvsMapImpl();

        model.setId(soapModel.getId());
        model.setServiceId(soapModel.getServiceId());
        model.setPaymentMethodId(soapModel.getPaymentMethodId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PaymentMethodSrvsMap> toModels(
        PaymentMethodSrvsMapSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PaymentMethodSrvsMap> models = new ArrayList<PaymentMethodSrvsMap>(soapModels.length);

        for (PaymentMethodSrvsMapSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PaymentMethodSrvsMap.class;
    }

    @Override
    public String getModelClassName() {
        return PaymentMethodSrvsMap.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("serviceId", getServiceId());
        attributes.put("paymentMethodId", getPaymentMethodId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String id = (String) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long serviceId = (Long) attributes.get("serviceId");

        if (serviceId != null) {
            setServiceId(serviceId);
        }

        Long paymentMethodId = (Long) attributes.get("paymentMethodId");

        if (paymentMethodId != null) {
            setPaymentMethodId(paymentMethodId);
        }
    }

    @JSON
    @Override
    public String getId() {
        if (_id == null) {
            return StringPool.BLANK;
        } else {
            return _id;
        }
    }

    @Override
    public void setId(String id) {
        _id = id;
    }

    @JSON
    @Override
    public long getServiceId() {
        return _serviceId;
    }

    @Override
    public void setServiceId(long serviceId) {
        _columnBitmask |= SERVICEID_COLUMN_BITMASK;

        if (!_setOriginalServiceId) {
            _setOriginalServiceId = true;

            _originalServiceId = _serviceId;
        }

        _serviceId = serviceId;
    }

    public long getOriginalServiceId() {
        return _originalServiceId;
    }

    @JSON
    @Override
    public long getPaymentMethodId() {
        return _paymentMethodId;
    }

    @Override
    public void setPaymentMethodId(long paymentMethodId) {
        _paymentMethodId = paymentMethodId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PaymentMethodSrvsMap toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PaymentMethodSrvsMap) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PaymentMethodSrvsMapImpl paymentMethodSrvsMapImpl = new PaymentMethodSrvsMapImpl();

        paymentMethodSrvsMapImpl.setId(getId());
        paymentMethodSrvsMapImpl.setServiceId(getServiceId());
        paymentMethodSrvsMapImpl.setPaymentMethodId(getPaymentMethodId());

        paymentMethodSrvsMapImpl.resetOriginalValues();

        return paymentMethodSrvsMapImpl;
    }

    @Override
    public int compareTo(PaymentMethodSrvsMap paymentMethodSrvsMap) {
        String primaryKey = paymentMethodSrvsMap.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PaymentMethodSrvsMap)) {
            return false;
        }

        PaymentMethodSrvsMap paymentMethodSrvsMap = (PaymentMethodSrvsMap) obj;

        String primaryKey = paymentMethodSrvsMap.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PaymentMethodSrvsMapModelImpl paymentMethodSrvsMapModelImpl = this;

        paymentMethodSrvsMapModelImpl._originalServiceId = paymentMethodSrvsMapModelImpl._serviceId;

        paymentMethodSrvsMapModelImpl._setOriginalServiceId = false;

        paymentMethodSrvsMapModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PaymentMethodSrvsMap> toCacheModel() {
        PaymentMethodSrvsMapCacheModel paymentMethodSrvsMapCacheModel = new PaymentMethodSrvsMapCacheModel();

        paymentMethodSrvsMapCacheModel.id = getId();

        String id = paymentMethodSrvsMapCacheModel.id;

        if ((id != null) && (id.length() == 0)) {
            paymentMethodSrvsMapCacheModel.id = null;
        }

        paymentMethodSrvsMapCacheModel.serviceId = getServiceId();

        paymentMethodSrvsMapCacheModel.paymentMethodId = getPaymentMethodId();

        return paymentMethodSrvsMapCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", serviceId=");
        sb.append(getServiceId());
        sb.append(", paymentMethodId=");
        sb.append(getPaymentMethodId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.PaymentMethodSrvsMap");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceId</column-name><column-value><![CDATA[");
        sb.append(getServiceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paymentMethodId</column-name><column-value><![CDATA[");
        sb.append(getPaymentMethodId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
