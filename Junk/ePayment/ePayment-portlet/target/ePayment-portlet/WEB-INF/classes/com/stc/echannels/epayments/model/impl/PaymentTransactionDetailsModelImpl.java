package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.stc.echannels.epayments.model.PaymentTransactionDetails;
import com.stc.echannels.epayments.model.PaymentTransactionDetailsModel;
import com.stc.echannels.epayments.model.PaymentTransactionDetailsSoap;
import com.stc.echannels.epayments.service.persistence.PaymentTransactionDetailsPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PaymentTransactionDetails service. Represents a row in the &quot;PAYMENT_TRANSACTION_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.PaymentTransactionDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentTransactionDetailsImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see PaymentTransactionDetailsImpl
 * @see com.stc.echannels.epayments.model.PaymentTransactionDetails
 * @see com.stc.echannels.epayments.model.PaymentTransactionDetailsModel
 * @generated
 */
@JSON(strict = true)
public class PaymentTransactionDetailsModelImpl extends BaseModelImpl<PaymentTransactionDetails>
    implements PaymentTransactionDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a payment transaction details model instance should use the {@link com.stc.echannels.epayments.model.PaymentTransactionDetails} interface instead.
     */
    public static final String TABLE_NAME = "PAYMENT_TRANSACTION_DETAILS";
    public static final Object[][] TABLE_COLUMNS = {
            { "EPAY_TRANS_ID", Types.VARCHAR },
            { "EPAY_INSTANCE_ID", Types.VARCHAR },
            { "ACCOUNT_NUMBER ", Types.VARCHAR },
            { "SERVICE_TYPE_ID ", Types.BIGINT },
            { "TRANS_AMOUNT ", Types.BIGINT },
            { "TRANS_VALUE", Types.VARCHAR },
            { "PROCESS_DATE", Types.TIMESTAMP },
            { "SERVICE_NUMBER", Types.VARCHAR },
            { "ID_TYPE ", Types.VARCHAR },
            { "RECIPIENT_ID ", Types.VARCHAR },
            { "RECIPIENT_ID_TYPE", Types.VARCHAR },
            { "NOTIFICATION_NUMBER", Types.VARCHAR },
            { "PROCESS_STATUS", Types.VARCHAR },
            { "SERVICE_CATEGORY", Types.VARCHAR },
            { "REASON_CODE", Types.VARCHAR },
            { "NATIVE_REASON_CODE ", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table PAYMENT_TRANSACTION_DETAILS (EPAY_TRANS_ID VARCHAR(75) not null,EPAY_INSTANCE_ID VARCHAR(75) not null,ACCOUNT_NUMBER   VARCHAR(75) null,SERVICE_TYPE_ID  LONG,TRANS_AMOUNT  LONG,TRANS_VALUE VARCHAR(75) null,PROCESS_DATE DATE null,SERVICE_NUMBER VARCHAR(75) null,ID_TYPE  VARCHAR(75) null,RECIPIENT_ID  VARCHAR(75) null,RECIPIENT_ID_TYPE VARCHAR(75) null,NOTIFICATION_NUMBER VARCHAR(75) null,PROCESS_STATUS VARCHAR(75) null,SERVICE_CATEGORY VARCHAR(75) null,REASON_CODE VARCHAR(75) null,NATIVE_REASON_CODE  VARCHAR(75) null,primary key (EPAY_TRANS_ID, EPAY_INSTANCE_ID))";
    public static final String TABLE_SQL_DROP = "drop table PAYMENT_TRANSACTION_DETAILS";
    public static final String ORDER_BY_JPQL = " ORDER BY paymentTransactionDetails.id.epayTransId ASC, paymentTransactionDetails.id.epayInstanceId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PAYMENT_TRANSACTION_DETAILS.EPAY_TRANS_ID ASC, PAYMENT_TRANSACTION_DETAILS.EPAY_INSTANCE_ID ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.PaymentTransactionDetails"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.PaymentTransactionDetails"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.PaymentTransactionDetails"));
    private static ClassLoader _classLoader = PaymentTransactionDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PaymentTransactionDetails.class
        };
    private String _epayTransId;
    private String _epayInstanceId;
    private String _accountNumber;
    private long _serviceTypeId;
    private long _transAmount;
    private String _transValue;
    private Date _processDate;
    private String _serviceNumber;
    private String _idType;
    private String _recipientId;
    private String _recipientIdType;
    private String _notificationNumber;
    private String _processStatus;
    private String _serviceCategory;
    private String _reasonCode;
    private String _nativeReasonCode;
    private PaymentTransactionDetails _escapedModel;

    public PaymentTransactionDetailsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PaymentTransactionDetails toModel(
        PaymentTransactionDetailsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PaymentTransactionDetails model = new PaymentTransactionDetailsImpl();

        model.setEpayTransId(soapModel.getEpayTransId());
        model.setEpayInstanceId(soapModel.getEpayInstanceId());
        model.setAccountNumber(soapModel.getAccountNumber());
        model.setServiceTypeId(soapModel.getServiceTypeId());
        model.setTransAmount(soapModel.getTransAmount());
        model.setTransValue(soapModel.getTransValue());
        model.setProcessDate(soapModel.getProcessDate());
        model.setServiceNumber(soapModel.getServiceNumber());
        model.setIdType(soapModel.getIdType());
        model.setRecipientId(soapModel.getRecipientId());
        model.setRecipientIdType(soapModel.getRecipientIdType());
        model.setNotificationNumber(soapModel.getNotificationNumber());
        model.setProcessStatus(soapModel.getProcessStatus());
        model.setServiceCategory(soapModel.getServiceCategory());
        model.setReasonCode(soapModel.getReasonCode());
        model.setNativeReasonCode(soapModel.getNativeReasonCode());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PaymentTransactionDetails> toModels(
        PaymentTransactionDetailsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PaymentTransactionDetails> models = new ArrayList<PaymentTransactionDetails>(soapModels.length);

        for (PaymentTransactionDetailsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public PaymentTransactionDetailsPK getPrimaryKey() {
        return new PaymentTransactionDetailsPK(_epayTransId, _epayInstanceId);
    }

    @Override
    public void setPrimaryKey(PaymentTransactionDetailsPK primaryKey) {
        setEpayTransId(primaryKey.epayTransId);
        setEpayInstanceId(primaryKey.epayInstanceId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new PaymentTransactionDetailsPK(_epayTransId, _epayInstanceId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PaymentTransactionDetailsPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PaymentTransactionDetails.class;
    }

    @Override
    public String getModelClassName() {
        return PaymentTransactionDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("epayTransId", getEpayTransId());
        attributes.put("epayInstanceId", getEpayInstanceId());
        attributes.put("accountNumber", getAccountNumber());
        attributes.put("serviceTypeId", getServiceTypeId());
        attributes.put("transAmount", getTransAmount());
        attributes.put("transValue", getTransValue());
        attributes.put("processDate", getProcessDate());
        attributes.put("serviceNumber", getServiceNumber());
        attributes.put("idType", getIdType());
        attributes.put("recipientId", getRecipientId());
        attributes.put("recipientIdType", getRecipientIdType());
        attributes.put("notificationNumber", getNotificationNumber());
        attributes.put("processStatus", getProcessStatus());
        attributes.put("serviceCategory", getServiceCategory());
        attributes.put("reasonCode", getReasonCode());
        attributes.put("nativeReasonCode", getNativeReasonCode());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String epayTransId = (String) attributes.get("epayTransId");

        if (epayTransId != null) {
            setEpayTransId(epayTransId);
        }

        String epayInstanceId = (String) attributes.get("epayInstanceId");

        if (epayInstanceId != null) {
            setEpayInstanceId(epayInstanceId);
        }

        String accountNumber = (String) attributes.get("accountNumber");

        if (accountNumber != null) {
            setAccountNumber(accountNumber);
        }

        Long serviceTypeId = (Long) attributes.get("serviceTypeId");

        if (serviceTypeId != null) {
            setServiceTypeId(serviceTypeId);
        }

        Long transAmount = (Long) attributes.get("transAmount");

        if (transAmount != null) {
            setTransAmount(transAmount);
        }

        String transValue = (String) attributes.get("transValue");

        if (transValue != null) {
            setTransValue(transValue);
        }

        Date processDate = (Date) attributes.get("processDate");

        if (processDate != null) {
            setProcessDate(processDate);
        }

        String serviceNumber = (String) attributes.get("serviceNumber");

        if (serviceNumber != null) {
            setServiceNumber(serviceNumber);
        }

        String idType = (String) attributes.get("idType");

        if (idType != null) {
            setIdType(idType);
        }

        String recipientId = (String) attributes.get("recipientId");

        if (recipientId != null) {
            setRecipientId(recipientId);
        }

        String recipientIdType = (String) attributes.get("recipientIdType");

        if (recipientIdType != null) {
            setRecipientIdType(recipientIdType);
        }

        String notificationNumber = (String) attributes.get(
                "notificationNumber");

        if (notificationNumber != null) {
            setNotificationNumber(notificationNumber);
        }

        String processStatus = (String) attributes.get("processStatus");

        if (processStatus != null) {
            setProcessStatus(processStatus);
        }

        String serviceCategory = (String) attributes.get("serviceCategory");

        if (serviceCategory != null) {
            setServiceCategory(serviceCategory);
        }

        String reasonCode = (String) attributes.get("reasonCode");

        if (reasonCode != null) {
            setReasonCode(reasonCode);
        }

        String nativeReasonCode = (String) attributes.get("nativeReasonCode");

        if (nativeReasonCode != null) {
            setNativeReasonCode(nativeReasonCode);
        }
    }

    @JSON
    @Override
    public String getEpayTransId() {
        if (_epayTransId == null) {
            return StringPool.BLANK;
        } else {
            return _epayTransId;
        }
    }

    @Override
    public void setEpayTransId(String epayTransId) {
        _epayTransId = epayTransId;
    }

    @JSON
    @Override
    public String getEpayInstanceId() {
        if (_epayInstanceId == null) {
            return StringPool.BLANK;
        } else {
            return _epayInstanceId;
        }
    }

    @Override
    public void setEpayInstanceId(String epayInstanceId) {
        _epayInstanceId = epayInstanceId;
    }

    @JSON
    @Override
    public String getAccountNumber() {
        if (_accountNumber == null) {
            return StringPool.BLANK;
        } else {
            return _accountNumber;
        }
    }

    @Override
    public void setAccountNumber(String accountNumber) {
        _accountNumber = accountNumber;
    }

    @JSON
    @Override
    public long getServiceTypeId() {
        return _serviceTypeId;
    }

    @Override
    public void setServiceTypeId(long serviceTypeId) {
        _serviceTypeId = serviceTypeId;
    }

    @JSON
    @Override
    public long getTransAmount() {
        return _transAmount;
    }

    @Override
    public void setTransAmount(long transAmount) {
        _transAmount = transAmount;
    }

    @JSON
    @Override
    public String getTransValue() {
        if (_transValue == null) {
            return StringPool.BLANK;
        } else {
            return _transValue;
        }
    }

    @Override
    public void setTransValue(String transValue) {
        _transValue = transValue;
    }

    @JSON
    @Override
    public Date getProcessDate() {
        return _processDate;
    }

    @Override
    public void setProcessDate(Date processDate) {
        _processDate = processDate;
    }

    @JSON
    @Override
    public String getServiceNumber() {
        if (_serviceNumber == null) {
            return StringPool.BLANK;
        } else {
            return _serviceNumber;
        }
    }

    @Override
    public void setServiceNumber(String serviceNumber) {
        _serviceNumber = serviceNumber;
    }

    @JSON
    @Override
    public String getIdType() {
        if (_idType == null) {
            return StringPool.BLANK;
        } else {
            return _idType;
        }
    }

    @Override
    public void setIdType(String idType) {
        _idType = idType;
    }

    @JSON
    @Override
    public String getRecipientId() {
        if (_recipientId == null) {
            return StringPool.BLANK;
        } else {
            return _recipientId;
        }
    }

    @Override
    public void setRecipientId(String recipientId) {
        _recipientId = recipientId;
    }

    @JSON
    @Override
    public String getRecipientIdType() {
        if (_recipientIdType == null) {
            return StringPool.BLANK;
        } else {
            return _recipientIdType;
        }
    }

    @Override
    public void setRecipientIdType(String recipientIdType) {
        _recipientIdType = recipientIdType;
    }

    @JSON
    @Override
    public String getNotificationNumber() {
        if (_notificationNumber == null) {
            return StringPool.BLANK;
        } else {
            return _notificationNumber;
        }
    }

    @Override
    public void setNotificationNumber(String notificationNumber) {
        _notificationNumber = notificationNumber;
    }

    @JSON
    @Override
    public String getProcessStatus() {
        if (_processStatus == null) {
            return StringPool.BLANK;
        } else {
            return _processStatus;
        }
    }

    @Override
    public void setProcessStatus(String processStatus) {
        _processStatus = processStatus;
    }

    @JSON
    @Override
    public String getServiceCategory() {
        if (_serviceCategory == null) {
            return StringPool.BLANK;
        } else {
            return _serviceCategory;
        }
    }

    @Override
    public void setServiceCategory(String serviceCategory) {
        _serviceCategory = serviceCategory;
    }

    @JSON
    @Override
    public String getReasonCode() {
        if (_reasonCode == null) {
            return StringPool.BLANK;
        } else {
            return _reasonCode;
        }
    }

    @Override
    public void setReasonCode(String reasonCode) {
        _reasonCode = reasonCode;
    }

    @JSON
    @Override
    public String getNativeReasonCode() {
        if (_nativeReasonCode == null) {
            return StringPool.BLANK;
        } else {
            return _nativeReasonCode;
        }
    }

    @Override
    public void setNativeReasonCode(String nativeReasonCode) {
        _nativeReasonCode = nativeReasonCode;
    }

    @Override
    public PaymentTransactionDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PaymentTransactionDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PaymentTransactionDetailsImpl paymentTransactionDetailsImpl = new PaymentTransactionDetailsImpl();

        paymentTransactionDetailsImpl.setEpayTransId(getEpayTransId());
        paymentTransactionDetailsImpl.setEpayInstanceId(getEpayInstanceId());
        paymentTransactionDetailsImpl.setAccountNumber(getAccountNumber());
        paymentTransactionDetailsImpl.setServiceTypeId(getServiceTypeId());
        paymentTransactionDetailsImpl.setTransAmount(getTransAmount());
        paymentTransactionDetailsImpl.setTransValue(getTransValue());
        paymentTransactionDetailsImpl.setProcessDate(getProcessDate());
        paymentTransactionDetailsImpl.setServiceNumber(getServiceNumber());
        paymentTransactionDetailsImpl.setIdType(getIdType());
        paymentTransactionDetailsImpl.setRecipientId(getRecipientId());
        paymentTransactionDetailsImpl.setRecipientIdType(getRecipientIdType());
        paymentTransactionDetailsImpl.setNotificationNumber(getNotificationNumber());
        paymentTransactionDetailsImpl.setProcessStatus(getProcessStatus());
        paymentTransactionDetailsImpl.setServiceCategory(getServiceCategory());
        paymentTransactionDetailsImpl.setReasonCode(getReasonCode());
        paymentTransactionDetailsImpl.setNativeReasonCode(getNativeReasonCode());

        paymentTransactionDetailsImpl.resetOriginalValues();

        return paymentTransactionDetailsImpl;
    }

    @Override
    public int compareTo(PaymentTransactionDetails paymentTransactionDetails) {
        PaymentTransactionDetailsPK primaryKey = paymentTransactionDetails.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PaymentTransactionDetails)) {
            return false;
        }

        PaymentTransactionDetails paymentTransactionDetails = (PaymentTransactionDetails) obj;

        PaymentTransactionDetailsPK primaryKey = paymentTransactionDetails.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<PaymentTransactionDetails> toCacheModel() {
        PaymentTransactionDetailsCacheModel paymentTransactionDetailsCacheModel = new PaymentTransactionDetailsCacheModel();

        paymentTransactionDetailsCacheModel.epayTransId = getEpayTransId();

        String epayTransId = paymentTransactionDetailsCacheModel.epayTransId;

        if ((epayTransId != null) && (epayTransId.length() == 0)) {
            paymentTransactionDetailsCacheModel.epayTransId = null;
        }

        paymentTransactionDetailsCacheModel.epayInstanceId = getEpayInstanceId();

        String epayInstanceId = paymentTransactionDetailsCacheModel.epayInstanceId;

        if ((epayInstanceId != null) && (epayInstanceId.length() == 0)) {
            paymentTransactionDetailsCacheModel.epayInstanceId = null;
        }

        paymentTransactionDetailsCacheModel.accountNumber = getAccountNumber();

        String accountNumber = paymentTransactionDetailsCacheModel.accountNumber;

        if ((accountNumber != null) && (accountNumber.length() == 0)) {
            paymentTransactionDetailsCacheModel.accountNumber = null;
        }

        paymentTransactionDetailsCacheModel.serviceTypeId = getServiceTypeId();

        paymentTransactionDetailsCacheModel.transAmount = getTransAmount();

        paymentTransactionDetailsCacheModel.transValue = getTransValue();

        String transValue = paymentTransactionDetailsCacheModel.transValue;

        if ((transValue != null) && (transValue.length() == 0)) {
            paymentTransactionDetailsCacheModel.transValue = null;
        }

        Date processDate = getProcessDate();

        if (processDate != null) {
            paymentTransactionDetailsCacheModel.processDate = processDate.getTime();
        } else {
            paymentTransactionDetailsCacheModel.processDate = Long.MIN_VALUE;
        }

        paymentTransactionDetailsCacheModel.serviceNumber = getServiceNumber();

        String serviceNumber = paymentTransactionDetailsCacheModel.serviceNumber;

        if ((serviceNumber != null) && (serviceNumber.length() == 0)) {
            paymentTransactionDetailsCacheModel.serviceNumber = null;
        }

        paymentTransactionDetailsCacheModel.idType = getIdType();

        String idType = paymentTransactionDetailsCacheModel.idType;

        if ((idType != null) && (idType.length() == 0)) {
            paymentTransactionDetailsCacheModel.idType = null;
        }

        paymentTransactionDetailsCacheModel.recipientId = getRecipientId();

        String recipientId = paymentTransactionDetailsCacheModel.recipientId;

        if ((recipientId != null) && (recipientId.length() == 0)) {
            paymentTransactionDetailsCacheModel.recipientId = null;
        }

        paymentTransactionDetailsCacheModel.recipientIdType = getRecipientIdType();

        String recipientIdType = paymentTransactionDetailsCacheModel.recipientIdType;

        if ((recipientIdType != null) && (recipientIdType.length() == 0)) {
            paymentTransactionDetailsCacheModel.recipientIdType = null;
        }

        paymentTransactionDetailsCacheModel.notificationNumber = getNotificationNumber();

        String notificationNumber = paymentTransactionDetailsCacheModel.notificationNumber;

        if ((notificationNumber != null) && (notificationNumber.length() == 0)) {
            paymentTransactionDetailsCacheModel.notificationNumber = null;
        }

        paymentTransactionDetailsCacheModel.processStatus = getProcessStatus();

        String processStatus = paymentTransactionDetailsCacheModel.processStatus;

        if ((processStatus != null) && (processStatus.length() == 0)) {
            paymentTransactionDetailsCacheModel.processStatus = null;
        }

        paymentTransactionDetailsCacheModel.serviceCategory = getServiceCategory();

        String serviceCategory = paymentTransactionDetailsCacheModel.serviceCategory;

        if ((serviceCategory != null) && (serviceCategory.length() == 0)) {
            paymentTransactionDetailsCacheModel.serviceCategory = null;
        }

        paymentTransactionDetailsCacheModel.reasonCode = getReasonCode();

        String reasonCode = paymentTransactionDetailsCacheModel.reasonCode;

        if ((reasonCode != null) && (reasonCode.length() == 0)) {
            paymentTransactionDetailsCacheModel.reasonCode = null;
        }

        paymentTransactionDetailsCacheModel.nativeReasonCode = getNativeReasonCode();

        String nativeReasonCode = paymentTransactionDetailsCacheModel.nativeReasonCode;

        if ((nativeReasonCode != null) && (nativeReasonCode.length() == 0)) {
            paymentTransactionDetailsCacheModel.nativeReasonCode = null;
        }

        return paymentTransactionDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{epayTransId=");
        sb.append(getEpayTransId());
        sb.append(", epayInstanceId=");
        sb.append(getEpayInstanceId());
        sb.append(", accountNumber=");
        sb.append(getAccountNumber());
        sb.append(", serviceTypeId=");
        sb.append(getServiceTypeId());
        sb.append(", transAmount=");
        sb.append(getTransAmount());
        sb.append(", transValue=");
        sb.append(getTransValue());
        sb.append(", processDate=");
        sb.append(getProcessDate());
        sb.append(", serviceNumber=");
        sb.append(getServiceNumber());
        sb.append(", idType=");
        sb.append(getIdType());
        sb.append(", recipientId=");
        sb.append(getRecipientId());
        sb.append(", recipientIdType=");
        sb.append(getRecipientIdType());
        sb.append(", notificationNumber=");
        sb.append(getNotificationNumber());
        sb.append(", processStatus=");
        sb.append(getProcessStatus());
        sb.append(", serviceCategory=");
        sb.append(getServiceCategory());
        sb.append(", reasonCode=");
        sb.append(getReasonCode());
        sb.append(", nativeReasonCode=");
        sb.append(getNativeReasonCode());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.PaymentTransactionDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>epayTransId</column-name><column-value><![CDATA[");
        sb.append(getEpayTransId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>epayInstanceId</column-name><column-value><![CDATA[");
        sb.append(getEpayInstanceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accountNumber</column-name><column-value><![CDATA[");
        sb.append(getAccountNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceTypeId</column-name><column-value><![CDATA[");
        sb.append(getServiceTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transAmount</column-name><column-value><![CDATA[");
        sb.append(getTransAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transValue</column-name><column-value><![CDATA[");
        sb.append(getTransValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processDate</column-name><column-value><![CDATA[");
        sb.append(getProcessDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceNumber</column-name><column-value><![CDATA[");
        sb.append(getServiceNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idType</column-name><column-value><![CDATA[");
        sb.append(getIdType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recipientId</column-name><column-value><![CDATA[");
        sb.append(getRecipientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>recipientIdType</column-name><column-value><![CDATA[");
        sb.append(getRecipientIdType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>notificationNumber</column-name><column-value><![CDATA[");
        sb.append(getNotificationNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processStatus</column-name><column-value><![CDATA[");
        sb.append(getProcessStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceCategory</column-name><column-value><![CDATA[");
        sb.append(getServiceCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reasonCode</column-name><column-value><![CDATA[");
        sb.append(getReasonCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nativeReasonCode</column-name><column-value><![CDATA[");
        sb.append(getNativeReasonCode());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
