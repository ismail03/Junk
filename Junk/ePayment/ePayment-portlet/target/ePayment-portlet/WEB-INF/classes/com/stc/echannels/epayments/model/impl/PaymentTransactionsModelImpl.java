package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.stc.echannels.epayments.model.PaymentTransactions;
import com.stc.echannels.epayments.model.PaymentTransactionsModel;
import com.stc.echannels.epayments.model.PaymentTransactionsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PaymentTransactions service. Represents a row in the &quot;PAYMENT_TRANSACTIONS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.PaymentTransactionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PaymentTransactionsImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see PaymentTransactionsImpl
 * @see com.stc.echannels.epayments.model.PaymentTransactions
 * @see com.stc.echannels.epayments.model.PaymentTransactionsModel
 * @generated
 */
@JSON(strict = true)
public class PaymentTransactionsModelImpl extends BaseModelImpl<PaymentTransactions>
    implements PaymentTransactionsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a payment transactions model instance should use the {@link com.stc.echannels.epayments.model.PaymentTransactions} interface instead.
     */
    public static final String TABLE_NAME = "PAYMENT_TRANSACTIONS";
    public static final Object[][] TABLE_COLUMNS = {
            { "EPAY_TRANS_ID", Types.VARCHAR },
            { "TRANS_AMOUNT ", Types.BIGINT },
            { "TRANS_VALUE", Types.VARCHAR },
            { "TRANS_AMT_CHK_DIGIT", Types.BIGINT },
            { "PROCESSOR_REFERENCE", Types.VARCHAR },
            { "CHANNEL_ID", Types.BIGINT },
            { "PMT_BANK_ID", Types.VARCHAR },
            { "PMT_BRANCH_ID", Types.VARCHAR },
            { "TRANS_PROCESS_DATE", Types.TIMESTAMP },
            { "BATCH_ID", Types.VARCHAR },
            { "SERVICE_ID", Types.BIGINT },
            { "APPLIED_DATE", Types.TIMESTAMP },
            { "APPLIED_AMOUNT", Types.BIGINT },
            { "PROCESS_STATUS", Types.VARCHAR },
            { "NOTIFICATION_NUMBER", Types.VARCHAR },
            { "CURRENCY_CODE", Types.VARCHAR },
            { "CONFIRMATION_NUMBER", Types.VARCHAR },
            { "PMT_RECEIVED_DATE", Types.TIMESTAMP },
            { "REASON_CODE", Types.VARCHAR },
            { "EVENT_TYPE_ID", Types.BIGINT },
            { "PMT_METHOD_ID", Types.BIGINT },
            { "PMT_TYPE", Types.VARCHAR },
            { "RPM_ID", Types.VARCHAR },
            { "NATIVE_REASON_CODE", Types.VARCHAR },
            { "FEE_ID", Types.BIGINT },
            { "REQUEST_LOCATION", Types.VARCHAR },
            { "PROFILE_ID", Types.VARCHAR },
            { "SENDER_ID ", Types.VARCHAR },
            { "LAST4DIGITS", Types.VARCHAR },
            { "CARD_TYPE ", Types.VARCHAR },
            { "EXPIRY_DATE", Types.TIMESTAMP },
            { "SOURCE_TRANS_TYPE", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table PAYMENT_TRANSACTIONS (EPAY_TRANS_ID VARCHAR(75) not null primary key,TRANS_AMOUNT  LONG,TRANS_VALUE VARCHAR(75) null,TRANS_AMT_CHK_DIGIT LONG,PROCESSOR_REFERENCE VARCHAR(75) null,CHANNEL_ID LONG,PMT_BANK_ID VARCHAR(75) null,PMT_BRANCH_ID VARCHAR(75) null,TRANS_PROCESS_DATE DATE null,BATCH_ID VARCHAR(75) null,SERVICE_ID LONG,APPLIED_DATE DATE null,APPLIED_AMOUNT LONG,PROCESS_STATUS VARCHAR(75) null,NOTIFICATION_NUMBER VARCHAR(75) null,CURRENCY_CODE VARCHAR(75) null,CONFIRMATION_NUMBER VARCHAR(75) null,PMT_RECEIVED_DATE DATE null,REASON_CODE VARCHAR(75) null,EVENT_TYPE_ID LONG,PMT_METHOD_ID LONG,PMT_TYPE VARCHAR(75) null,RPM_ID VARCHAR(75) null,NATIVE_REASON_CODE VARCHAR(75) null,FEE_ID LONG,REQUEST_LOCATION VARCHAR(75) null,PROFILE_ID VARCHAR(75) null,SENDER_ID  VARCHAR(75) null,LAST4DIGITS VARCHAR(75) null,CARD_TYPE  VARCHAR(75) null,EXPIRY_DATE DATE null,SOURCE_TRANS_TYPE VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table PAYMENT_TRANSACTIONS";
    public static final String ORDER_BY_JPQL = " ORDER BY paymentTransactions.epayTransId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PAYMENT_TRANSACTIONS.EPAY_TRANS_ID ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.PaymentTransactions"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.PaymentTransactions"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.stc.echannels.epayments.model.PaymentTransactions"),
            true);
    public static long CHANNELID_COLUMN_BITMASK = 1L;
    public static long PMTBANKID_COLUMN_BITMASK = 2L;
    public static long PMTBRANCHID_COLUMN_BITMASK = 4L;
    public static long EPAYTRANSID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.PaymentTransactions"));
    private static ClassLoader _classLoader = PaymentTransactions.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PaymentTransactions.class
        };
    private String _epayTransId;
    private long _transAmount;
    private String _transValue;
    private long _transAmotChkDigit;
    private String _processorReference;
    private long _channelId;
    private long _originalChannelId;
    private boolean _setOriginalChannelId;
    private String _pmtBankId;
    private String _originalPmtBankId;
    private String _pmtBranchId;
    private String _originalPmtBranchId;
    private Date _transProcessDate;
    private String _batchId;
    private long _serviceId;
    private Date _appliedDate;
    private long _appliedAmount;
    private String _processStatus;
    private String _notificationNumber;
    private String _currencyCode;
    private String _confirmationNumber;
    private Date _pmtRecievedDate;
    private String _reasonCode;
    private long _eventTypeId;
    private long _pmtMethodId;
    private String _pmtType;
    private String _rpmId;
    private String _nativeReasonCode;
    private long _feeId;
    private String _requestLocation;
    private String _profileId;
    private String _senderId;
    private String _last4Digits;
    private String _cardType;
    private Date _expiryDate;
    private String _sourceTransType;
    private long _columnBitmask;
    private PaymentTransactions _escapedModel;

    public PaymentTransactionsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PaymentTransactions toModel(PaymentTransactionsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PaymentTransactions model = new PaymentTransactionsImpl();

        model.setEpayTransId(soapModel.getEpayTransId());
        model.setTransAmount(soapModel.getTransAmount());
        model.setTransValue(soapModel.getTransValue());
        model.setTransAmotChkDigit(soapModel.getTransAmotChkDigit());
        model.setProcessorReference(soapModel.getProcessorReference());
        model.setChannelId(soapModel.getChannelId());
        model.setPmtBankId(soapModel.getPmtBankId());
        model.setPmtBranchId(soapModel.getPmtBranchId());
        model.setTransProcessDate(soapModel.getTransProcessDate());
        model.setBatchId(soapModel.getBatchId());
        model.setServiceId(soapModel.getServiceId());
        model.setAppliedDate(soapModel.getAppliedDate());
        model.setAppliedAmount(soapModel.getAppliedAmount());
        model.setProcessStatus(soapModel.getProcessStatus());
        model.setNotificationNumber(soapModel.getNotificationNumber());
        model.setCurrencyCode(soapModel.getCurrencyCode());
        model.setConfirmationNumber(soapModel.getConfirmationNumber());
        model.setPmtRecievedDate(soapModel.getPmtRecievedDate());
        model.setReasonCode(soapModel.getReasonCode());
        model.setEventTypeId(soapModel.getEventTypeId());
        model.setPmtMethodId(soapModel.getPmtMethodId());
        model.setPmtType(soapModel.getPmtType());
        model.setRpmId(soapModel.getRpmId());
        model.setNativeReasonCode(soapModel.getNativeReasonCode());
        model.setFeeId(soapModel.getFeeId());
        model.setRequestLocation(soapModel.getRequestLocation());
        model.setProfileId(soapModel.getProfileId());
        model.setSenderId(soapModel.getSenderId());
        model.setLast4Digits(soapModel.getLast4Digits());
        model.setCardType(soapModel.getCardType());
        model.setExpiryDate(soapModel.getExpiryDate());
        model.setSourceTransType(soapModel.getSourceTransType());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PaymentTransactions> toModels(
        PaymentTransactionsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PaymentTransactions> models = new ArrayList<PaymentTransactions>(soapModels.length);

        for (PaymentTransactionsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _epayTransId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setEpayTransId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _epayTransId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PaymentTransactions.class;
    }

    @Override
    public String getModelClassName() {
        return PaymentTransactions.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("epayTransId", getEpayTransId());
        attributes.put("transAmount", getTransAmount());
        attributes.put("transValue", getTransValue());
        attributes.put("transAmotChkDigit", getTransAmotChkDigit());
        attributes.put("processorReference", getProcessorReference());
        attributes.put("channelId", getChannelId());
        attributes.put("pmtBankId", getPmtBankId());
        attributes.put("pmtBranchId", getPmtBranchId());
        attributes.put("transProcessDate", getTransProcessDate());
        attributes.put("batchId", getBatchId());
        attributes.put("serviceId", getServiceId());
        attributes.put("appliedDate", getAppliedDate());
        attributes.put("appliedAmount", getAppliedAmount());
        attributes.put("processStatus", getProcessStatus());
        attributes.put("notificationNumber", getNotificationNumber());
        attributes.put("currencyCode", getCurrencyCode());
        attributes.put("confirmationNumber", getConfirmationNumber());
        attributes.put("pmtRecievedDate", getPmtRecievedDate());
        attributes.put("reasonCode", getReasonCode());
        attributes.put("eventTypeId", getEventTypeId());
        attributes.put("pmtMethodId", getPmtMethodId());
        attributes.put("pmtType", getPmtType());
        attributes.put("rpmId", getRpmId());
        attributes.put("nativeReasonCode", getNativeReasonCode());
        attributes.put("feeId", getFeeId());
        attributes.put("requestLocation", getRequestLocation());
        attributes.put("profileId", getProfileId());
        attributes.put("senderId", getSenderId());
        attributes.put("last4Digits", getLast4Digits());
        attributes.put("cardType", getCardType());
        attributes.put("expiryDate", getExpiryDate());
        attributes.put("sourceTransType", getSourceTransType());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String epayTransId = (String) attributes.get("epayTransId");

        if (epayTransId != null) {
            setEpayTransId(epayTransId);
        }

        Long transAmount = (Long) attributes.get("transAmount");

        if (transAmount != null) {
            setTransAmount(transAmount);
        }

        String transValue = (String) attributes.get("transValue");

        if (transValue != null) {
            setTransValue(transValue);
        }

        Long transAmotChkDigit = (Long) attributes.get("transAmotChkDigit");

        if (transAmotChkDigit != null) {
            setTransAmotChkDigit(transAmotChkDigit);
        }

        String processorReference = (String) attributes.get(
                "processorReference");

        if (processorReference != null) {
            setProcessorReference(processorReference);
        }

        Long channelId = (Long) attributes.get("channelId");

        if (channelId != null) {
            setChannelId(channelId);
        }

        String pmtBankId = (String) attributes.get("pmtBankId");

        if (pmtBankId != null) {
            setPmtBankId(pmtBankId);
        }

        String pmtBranchId = (String) attributes.get("pmtBranchId");

        if (pmtBranchId != null) {
            setPmtBranchId(pmtBranchId);
        }

        Date transProcessDate = (Date) attributes.get("transProcessDate");

        if (transProcessDate != null) {
            setTransProcessDate(transProcessDate);
        }

        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Long serviceId = (Long) attributes.get("serviceId");

        if (serviceId != null) {
            setServiceId(serviceId);
        }

        Date appliedDate = (Date) attributes.get("appliedDate");

        if (appliedDate != null) {
            setAppliedDate(appliedDate);
        }

        Long appliedAmount = (Long) attributes.get("appliedAmount");

        if (appliedAmount != null) {
            setAppliedAmount(appliedAmount);
        }

        String processStatus = (String) attributes.get("processStatus");

        if (processStatus != null) {
            setProcessStatus(processStatus);
        }

        String notificationNumber = (String) attributes.get(
                "notificationNumber");

        if (notificationNumber != null) {
            setNotificationNumber(notificationNumber);
        }

        String currencyCode = (String) attributes.get("currencyCode");

        if (currencyCode != null) {
            setCurrencyCode(currencyCode);
        }

        String confirmationNumber = (String) attributes.get(
                "confirmationNumber");

        if (confirmationNumber != null) {
            setConfirmationNumber(confirmationNumber);
        }

        Date pmtRecievedDate = (Date) attributes.get("pmtRecievedDate");

        if (pmtRecievedDate != null) {
            setPmtRecievedDate(pmtRecievedDate);
        }

        String reasonCode = (String) attributes.get("reasonCode");

        if (reasonCode != null) {
            setReasonCode(reasonCode);
        }

        Long eventTypeId = (Long) attributes.get("eventTypeId");

        if (eventTypeId != null) {
            setEventTypeId(eventTypeId);
        }

        Long pmtMethodId = (Long) attributes.get("pmtMethodId");

        if (pmtMethodId != null) {
            setPmtMethodId(pmtMethodId);
        }

        String pmtType = (String) attributes.get("pmtType");

        if (pmtType != null) {
            setPmtType(pmtType);
        }

        String rpmId = (String) attributes.get("rpmId");

        if (rpmId != null) {
            setRpmId(rpmId);
        }

        String nativeReasonCode = (String) attributes.get("nativeReasonCode");

        if (nativeReasonCode != null) {
            setNativeReasonCode(nativeReasonCode);
        }

        Long feeId = (Long) attributes.get("feeId");

        if (feeId != null) {
            setFeeId(feeId);
        }

        String requestLocation = (String) attributes.get("requestLocation");

        if (requestLocation != null) {
            setRequestLocation(requestLocation);
        }

        String profileId = (String) attributes.get("profileId");

        if (profileId != null) {
            setProfileId(profileId);
        }

        String senderId = (String) attributes.get("senderId");

        if (senderId != null) {
            setSenderId(senderId);
        }

        String last4Digits = (String) attributes.get("last4Digits");

        if (last4Digits != null) {
            setLast4Digits(last4Digits);
        }

        String cardType = (String) attributes.get("cardType");

        if (cardType != null) {
            setCardType(cardType);
        }

        Date expiryDate = (Date) attributes.get("expiryDate");

        if (expiryDate != null) {
            setExpiryDate(expiryDate);
        }

        String sourceTransType = (String) attributes.get("sourceTransType");

        if (sourceTransType != null) {
            setSourceTransType(sourceTransType);
        }
    }

    @JSON
    @Override
    public String getEpayTransId() {
        if (_epayTransId == null) {
            return StringPool.BLANK;
        } else {
            return _epayTransId;
        }
    }

    @Override
    public void setEpayTransId(String epayTransId) {
        _epayTransId = epayTransId;
    }

    @JSON
    @Override
    public long getTransAmount() {
        return _transAmount;
    }

    @Override
    public void setTransAmount(long transAmount) {
        _transAmount = transAmount;
    }

    @JSON
    @Override
    public String getTransValue() {
        if (_transValue == null) {
            return StringPool.BLANK;
        } else {
            return _transValue;
        }
    }

    @Override
    public void setTransValue(String transValue) {
        _transValue = transValue;
    }

    @JSON
    @Override
    public long getTransAmotChkDigit() {
        return _transAmotChkDigit;
    }

    @Override
    public void setTransAmotChkDigit(long transAmotChkDigit) {
        _transAmotChkDigit = transAmotChkDigit;
    }

    @JSON
    @Override
    public String getProcessorReference() {
        if (_processorReference == null) {
            return StringPool.BLANK;
        } else {
            return _processorReference;
        }
    }

    @Override
    public void setProcessorReference(String processorReference) {
        _processorReference = processorReference;
    }

    @JSON
    @Override
    public long getChannelId() {
        return _channelId;
    }

    @Override
    public void setChannelId(long channelId) {
        _columnBitmask |= CHANNELID_COLUMN_BITMASK;

        if (!_setOriginalChannelId) {
            _setOriginalChannelId = true;

            _originalChannelId = _channelId;
        }

        _channelId = channelId;
    }

    public long getOriginalChannelId() {
        return _originalChannelId;
    }

    @JSON
    @Override
    public String getPmtBankId() {
        if (_pmtBankId == null) {
            return StringPool.BLANK;
        } else {
            return _pmtBankId;
        }
    }

    @Override
    public void setPmtBankId(String pmtBankId) {
        _columnBitmask |= PMTBANKID_COLUMN_BITMASK;

        if (_originalPmtBankId == null) {
            _originalPmtBankId = _pmtBankId;
        }

        _pmtBankId = pmtBankId;
    }

    public String getOriginalPmtBankId() {
        return GetterUtil.getString(_originalPmtBankId);
    }

    @JSON
    @Override
    public String getPmtBranchId() {
        if (_pmtBranchId == null) {
            return StringPool.BLANK;
        } else {
            return _pmtBranchId;
        }
    }

    @Override
    public void setPmtBranchId(String pmtBranchId) {
        _columnBitmask |= PMTBRANCHID_COLUMN_BITMASK;

        if (_originalPmtBranchId == null) {
            _originalPmtBranchId = _pmtBranchId;
        }

        _pmtBranchId = pmtBranchId;
    }

    public String getOriginalPmtBranchId() {
        return GetterUtil.getString(_originalPmtBranchId);
    }

    @JSON
    @Override
    public Date getTransProcessDate() {
        return _transProcessDate;
    }

    @Override
    public void setTransProcessDate(Date transProcessDate) {
        _transProcessDate = transProcessDate;
    }

    @JSON
    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @JSON
    @Override
    public long getServiceId() {
        return _serviceId;
    }

    @Override
    public void setServiceId(long serviceId) {
        _serviceId = serviceId;
    }

    @JSON
    @Override
    public Date getAppliedDate() {
        return _appliedDate;
    }

    @Override
    public void setAppliedDate(Date appliedDate) {
        _appliedDate = appliedDate;
    }

    @JSON
    @Override
    public long getAppliedAmount() {
        return _appliedAmount;
    }

    @Override
    public void setAppliedAmount(long appliedAmount) {
        _appliedAmount = appliedAmount;
    }

    @JSON
    @Override
    public String getProcessStatus() {
        if (_processStatus == null) {
            return StringPool.BLANK;
        } else {
            return _processStatus;
        }
    }

    @Override
    public void setProcessStatus(String processStatus) {
        _processStatus = processStatus;
    }

    @JSON
    @Override
    public String getNotificationNumber() {
        if (_notificationNumber == null) {
            return StringPool.BLANK;
        } else {
            return _notificationNumber;
        }
    }

    @Override
    public void setNotificationNumber(String notificationNumber) {
        _notificationNumber = notificationNumber;
    }

    @JSON
    @Override
    public String getCurrencyCode() {
        if (_currencyCode == null) {
            return StringPool.BLANK;
        } else {
            return _currencyCode;
        }
    }

    @Override
    public void setCurrencyCode(String currencyCode) {
        _currencyCode = currencyCode;
    }

    @JSON
    @Override
    public String getConfirmationNumber() {
        if (_confirmationNumber == null) {
            return StringPool.BLANK;
        } else {
            return _confirmationNumber;
        }
    }

    @Override
    public void setConfirmationNumber(String confirmationNumber) {
        _confirmationNumber = confirmationNumber;
    }

    @JSON
    @Override
    public Date getPmtRecievedDate() {
        return _pmtRecievedDate;
    }

    @Override
    public void setPmtRecievedDate(Date pmtRecievedDate) {
        _pmtRecievedDate = pmtRecievedDate;
    }

    @JSON
    @Override
    public String getReasonCode() {
        if (_reasonCode == null) {
            return StringPool.BLANK;
        } else {
            return _reasonCode;
        }
    }

    @Override
    public void setReasonCode(String reasonCode) {
        _reasonCode = reasonCode;
    }

    @JSON
    @Override
    public long getEventTypeId() {
        return _eventTypeId;
    }

    @Override
    public void setEventTypeId(long eventTypeId) {
        _eventTypeId = eventTypeId;
    }

    @JSON
    @Override
    public long getPmtMethodId() {
        return _pmtMethodId;
    }

    @Override
    public void setPmtMethodId(long pmtMethodId) {
        _pmtMethodId = pmtMethodId;
    }

    @JSON
    @Override
    public String getPmtType() {
        if (_pmtType == null) {
            return StringPool.BLANK;
        } else {
            return _pmtType;
        }
    }

    @Override
    public void setPmtType(String pmtType) {
        _pmtType = pmtType;
    }

    @JSON
    @Override
    public String getRpmId() {
        if (_rpmId == null) {
            return StringPool.BLANK;
        } else {
            return _rpmId;
        }
    }

    @Override
    public void setRpmId(String rpmId) {
        _rpmId = rpmId;
    }

    @JSON
    @Override
    public String getNativeReasonCode() {
        if (_nativeReasonCode == null) {
            return StringPool.BLANK;
        } else {
            return _nativeReasonCode;
        }
    }

    @Override
    public void setNativeReasonCode(String nativeReasonCode) {
        _nativeReasonCode = nativeReasonCode;
    }

    @JSON
    @Override
    public long getFeeId() {
        return _feeId;
    }

    @Override
    public void setFeeId(long feeId) {
        _feeId = feeId;
    }

    @JSON
    @Override
    public String getRequestLocation() {
        if (_requestLocation == null) {
            return StringPool.BLANK;
        } else {
            return _requestLocation;
        }
    }

    @Override
    public void setRequestLocation(String requestLocation) {
        _requestLocation = requestLocation;
    }

    @JSON
    @Override
    public String getProfileId() {
        if (_profileId == null) {
            return StringPool.BLANK;
        } else {
            return _profileId;
        }
    }

    @Override
    public void setProfileId(String profileId) {
        _profileId = profileId;
    }

    @JSON
    @Override
    public String getSenderId() {
        if (_senderId == null) {
            return StringPool.BLANK;
        } else {
            return _senderId;
        }
    }

    @Override
    public void setSenderId(String senderId) {
        _senderId = senderId;
    }

    @JSON
    @Override
    public String getLast4Digits() {
        if (_last4Digits == null) {
            return StringPool.BLANK;
        } else {
            return _last4Digits;
        }
    }

    @Override
    public void setLast4Digits(String last4Digits) {
        _last4Digits = last4Digits;
    }

    @JSON
    @Override
    public String getCardType() {
        if (_cardType == null) {
            return StringPool.BLANK;
        } else {
            return _cardType;
        }
    }

    @Override
    public void setCardType(String cardType) {
        _cardType = cardType;
    }

    @JSON
    @Override
    public Date getExpiryDate() {
        return _expiryDate;
    }

    @Override
    public void setExpiryDate(Date expiryDate) {
        _expiryDate = expiryDate;
    }

    @JSON
    @Override
    public String getSourceTransType() {
        if (_sourceTransType == null) {
            return StringPool.BLANK;
        } else {
            return _sourceTransType;
        }
    }

    @Override
    public void setSourceTransType(String sourceTransType) {
        _sourceTransType = sourceTransType;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PaymentTransactions toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PaymentTransactions) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PaymentTransactionsImpl paymentTransactionsImpl = new PaymentTransactionsImpl();

        paymentTransactionsImpl.setEpayTransId(getEpayTransId());
        paymentTransactionsImpl.setTransAmount(getTransAmount());
        paymentTransactionsImpl.setTransValue(getTransValue());
        paymentTransactionsImpl.setTransAmotChkDigit(getTransAmotChkDigit());
        paymentTransactionsImpl.setProcessorReference(getProcessorReference());
        paymentTransactionsImpl.setChannelId(getChannelId());
        paymentTransactionsImpl.setPmtBankId(getPmtBankId());
        paymentTransactionsImpl.setPmtBranchId(getPmtBranchId());
        paymentTransactionsImpl.setTransProcessDate(getTransProcessDate());
        paymentTransactionsImpl.setBatchId(getBatchId());
        paymentTransactionsImpl.setServiceId(getServiceId());
        paymentTransactionsImpl.setAppliedDate(getAppliedDate());
        paymentTransactionsImpl.setAppliedAmount(getAppliedAmount());
        paymentTransactionsImpl.setProcessStatus(getProcessStatus());
        paymentTransactionsImpl.setNotificationNumber(getNotificationNumber());
        paymentTransactionsImpl.setCurrencyCode(getCurrencyCode());
        paymentTransactionsImpl.setConfirmationNumber(getConfirmationNumber());
        paymentTransactionsImpl.setPmtRecievedDate(getPmtRecievedDate());
        paymentTransactionsImpl.setReasonCode(getReasonCode());
        paymentTransactionsImpl.setEventTypeId(getEventTypeId());
        paymentTransactionsImpl.setPmtMethodId(getPmtMethodId());
        paymentTransactionsImpl.setPmtType(getPmtType());
        paymentTransactionsImpl.setRpmId(getRpmId());
        paymentTransactionsImpl.setNativeReasonCode(getNativeReasonCode());
        paymentTransactionsImpl.setFeeId(getFeeId());
        paymentTransactionsImpl.setRequestLocation(getRequestLocation());
        paymentTransactionsImpl.setProfileId(getProfileId());
        paymentTransactionsImpl.setSenderId(getSenderId());
        paymentTransactionsImpl.setLast4Digits(getLast4Digits());
        paymentTransactionsImpl.setCardType(getCardType());
        paymentTransactionsImpl.setExpiryDate(getExpiryDate());
        paymentTransactionsImpl.setSourceTransType(getSourceTransType());

        paymentTransactionsImpl.resetOriginalValues();

        return paymentTransactionsImpl;
    }

    @Override
    public int compareTo(PaymentTransactions paymentTransactions) {
        String primaryKey = paymentTransactions.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PaymentTransactions)) {
            return false;
        }

        PaymentTransactions paymentTransactions = (PaymentTransactions) obj;

        String primaryKey = paymentTransactions.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PaymentTransactionsModelImpl paymentTransactionsModelImpl = this;

        paymentTransactionsModelImpl._originalChannelId = paymentTransactionsModelImpl._channelId;

        paymentTransactionsModelImpl._setOriginalChannelId = false;

        paymentTransactionsModelImpl._originalPmtBankId = paymentTransactionsModelImpl._pmtBankId;

        paymentTransactionsModelImpl._originalPmtBranchId = paymentTransactionsModelImpl._pmtBranchId;

        paymentTransactionsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PaymentTransactions> toCacheModel() {
        PaymentTransactionsCacheModel paymentTransactionsCacheModel = new PaymentTransactionsCacheModel();

        paymentTransactionsCacheModel.epayTransId = getEpayTransId();

        String epayTransId = paymentTransactionsCacheModel.epayTransId;

        if ((epayTransId != null) && (epayTransId.length() == 0)) {
            paymentTransactionsCacheModel.epayTransId = null;
        }

        paymentTransactionsCacheModel.transAmount = getTransAmount();

        paymentTransactionsCacheModel.transValue = getTransValue();

        String transValue = paymentTransactionsCacheModel.transValue;

        if ((transValue != null) && (transValue.length() == 0)) {
            paymentTransactionsCacheModel.transValue = null;
        }

        paymentTransactionsCacheModel.transAmotChkDigit = getTransAmotChkDigit();

        paymentTransactionsCacheModel.processorReference = getProcessorReference();

        String processorReference = paymentTransactionsCacheModel.processorReference;

        if ((processorReference != null) && (processorReference.length() == 0)) {
            paymentTransactionsCacheModel.processorReference = null;
        }

        paymentTransactionsCacheModel.channelId = getChannelId();

        paymentTransactionsCacheModel.pmtBankId = getPmtBankId();

        String pmtBankId = paymentTransactionsCacheModel.pmtBankId;

        if ((pmtBankId != null) && (pmtBankId.length() == 0)) {
            paymentTransactionsCacheModel.pmtBankId = null;
        }

        paymentTransactionsCacheModel.pmtBranchId = getPmtBranchId();

        String pmtBranchId = paymentTransactionsCacheModel.pmtBranchId;

        if ((pmtBranchId != null) && (pmtBranchId.length() == 0)) {
            paymentTransactionsCacheModel.pmtBranchId = null;
        }

        Date transProcessDate = getTransProcessDate();

        if (transProcessDate != null) {
            paymentTransactionsCacheModel.transProcessDate = transProcessDate.getTime();
        } else {
            paymentTransactionsCacheModel.transProcessDate = Long.MIN_VALUE;
        }

        paymentTransactionsCacheModel.batchId = getBatchId();

        String batchId = paymentTransactionsCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            paymentTransactionsCacheModel.batchId = null;
        }

        paymentTransactionsCacheModel.serviceId = getServiceId();

        Date appliedDate = getAppliedDate();

        if (appliedDate != null) {
            paymentTransactionsCacheModel.appliedDate = appliedDate.getTime();
        } else {
            paymentTransactionsCacheModel.appliedDate = Long.MIN_VALUE;
        }

        paymentTransactionsCacheModel.appliedAmount = getAppliedAmount();

        paymentTransactionsCacheModel.processStatus = getProcessStatus();

        String processStatus = paymentTransactionsCacheModel.processStatus;

        if ((processStatus != null) && (processStatus.length() == 0)) {
            paymentTransactionsCacheModel.processStatus = null;
        }

        paymentTransactionsCacheModel.notificationNumber = getNotificationNumber();

        String notificationNumber = paymentTransactionsCacheModel.notificationNumber;

        if ((notificationNumber != null) && (notificationNumber.length() == 0)) {
            paymentTransactionsCacheModel.notificationNumber = null;
        }

        paymentTransactionsCacheModel.currencyCode = getCurrencyCode();

        String currencyCode = paymentTransactionsCacheModel.currencyCode;

        if ((currencyCode != null) && (currencyCode.length() == 0)) {
            paymentTransactionsCacheModel.currencyCode = null;
        }

        paymentTransactionsCacheModel.confirmationNumber = getConfirmationNumber();

        String confirmationNumber = paymentTransactionsCacheModel.confirmationNumber;

        if ((confirmationNumber != null) && (confirmationNumber.length() == 0)) {
            paymentTransactionsCacheModel.confirmationNumber = null;
        }

        Date pmtRecievedDate = getPmtRecievedDate();

        if (pmtRecievedDate != null) {
            paymentTransactionsCacheModel.pmtRecievedDate = pmtRecievedDate.getTime();
        } else {
            paymentTransactionsCacheModel.pmtRecievedDate = Long.MIN_VALUE;
        }

        paymentTransactionsCacheModel.reasonCode = getReasonCode();

        String reasonCode = paymentTransactionsCacheModel.reasonCode;

        if ((reasonCode != null) && (reasonCode.length() == 0)) {
            paymentTransactionsCacheModel.reasonCode = null;
        }

        paymentTransactionsCacheModel.eventTypeId = getEventTypeId();

        paymentTransactionsCacheModel.pmtMethodId = getPmtMethodId();

        paymentTransactionsCacheModel.pmtType = getPmtType();

        String pmtType = paymentTransactionsCacheModel.pmtType;

        if ((pmtType != null) && (pmtType.length() == 0)) {
            paymentTransactionsCacheModel.pmtType = null;
        }

        paymentTransactionsCacheModel.rpmId = getRpmId();

        String rpmId = paymentTransactionsCacheModel.rpmId;

        if ((rpmId != null) && (rpmId.length() == 0)) {
            paymentTransactionsCacheModel.rpmId = null;
        }

        paymentTransactionsCacheModel.nativeReasonCode = getNativeReasonCode();

        String nativeReasonCode = paymentTransactionsCacheModel.nativeReasonCode;

        if ((nativeReasonCode != null) && (nativeReasonCode.length() == 0)) {
            paymentTransactionsCacheModel.nativeReasonCode = null;
        }

        paymentTransactionsCacheModel.feeId = getFeeId();

        paymentTransactionsCacheModel.requestLocation = getRequestLocation();

        String requestLocation = paymentTransactionsCacheModel.requestLocation;

        if ((requestLocation != null) && (requestLocation.length() == 0)) {
            paymentTransactionsCacheModel.requestLocation = null;
        }

        paymentTransactionsCacheModel.profileId = getProfileId();

        String profileId = paymentTransactionsCacheModel.profileId;

        if ((profileId != null) && (profileId.length() == 0)) {
            paymentTransactionsCacheModel.profileId = null;
        }

        paymentTransactionsCacheModel.senderId = getSenderId();

        String senderId = paymentTransactionsCacheModel.senderId;

        if ((senderId != null) && (senderId.length() == 0)) {
            paymentTransactionsCacheModel.senderId = null;
        }

        paymentTransactionsCacheModel.last4Digits = getLast4Digits();

        String last4Digits = paymentTransactionsCacheModel.last4Digits;

        if ((last4Digits != null) && (last4Digits.length() == 0)) {
            paymentTransactionsCacheModel.last4Digits = null;
        }

        paymentTransactionsCacheModel.cardType = getCardType();

        String cardType = paymentTransactionsCacheModel.cardType;

        if ((cardType != null) && (cardType.length() == 0)) {
            paymentTransactionsCacheModel.cardType = null;
        }

        Date expiryDate = getExpiryDate();

        if (expiryDate != null) {
            paymentTransactionsCacheModel.expiryDate = expiryDate.getTime();
        } else {
            paymentTransactionsCacheModel.expiryDate = Long.MIN_VALUE;
        }

        paymentTransactionsCacheModel.sourceTransType = getSourceTransType();

        String sourceTransType = paymentTransactionsCacheModel.sourceTransType;

        if ((sourceTransType != null) && (sourceTransType.length() == 0)) {
            paymentTransactionsCacheModel.sourceTransType = null;
        }

        return paymentTransactionsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(65);

        sb.append("{epayTransId=");
        sb.append(getEpayTransId());
        sb.append(", transAmount=");
        sb.append(getTransAmount());
        sb.append(", transValue=");
        sb.append(getTransValue());
        sb.append(", transAmotChkDigit=");
        sb.append(getTransAmotChkDigit());
        sb.append(", processorReference=");
        sb.append(getProcessorReference());
        sb.append(", channelId=");
        sb.append(getChannelId());
        sb.append(", pmtBankId=");
        sb.append(getPmtBankId());
        sb.append(", pmtBranchId=");
        sb.append(getPmtBranchId());
        sb.append(", transProcessDate=");
        sb.append(getTransProcessDate());
        sb.append(", batchId=");
        sb.append(getBatchId());
        sb.append(", serviceId=");
        sb.append(getServiceId());
        sb.append(", appliedDate=");
        sb.append(getAppliedDate());
        sb.append(", appliedAmount=");
        sb.append(getAppliedAmount());
        sb.append(", processStatus=");
        sb.append(getProcessStatus());
        sb.append(", notificationNumber=");
        sb.append(getNotificationNumber());
        sb.append(", currencyCode=");
        sb.append(getCurrencyCode());
        sb.append(", confirmationNumber=");
        sb.append(getConfirmationNumber());
        sb.append(", pmtRecievedDate=");
        sb.append(getPmtRecievedDate());
        sb.append(", reasonCode=");
        sb.append(getReasonCode());
        sb.append(", eventTypeId=");
        sb.append(getEventTypeId());
        sb.append(", pmtMethodId=");
        sb.append(getPmtMethodId());
        sb.append(", pmtType=");
        sb.append(getPmtType());
        sb.append(", rpmId=");
        sb.append(getRpmId());
        sb.append(", nativeReasonCode=");
        sb.append(getNativeReasonCode());
        sb.append(", feeId=");
        sb.append(getFeeId());
        sb.append(", requestLocation=");
        sb.append(getRequestLocation());
        sb.append(", profileId=");
        sb.append(getProfileId());
        sb.append(", senderId=");
        sb.append(getSenderId());
        sb.append(", last4Digits=");
        sb.append(getLast4Digits());
        sb.append(", cardType=");
        sb.append(getCardType());
        sb.append(", expiryDate=");
        sb.append(getExpiryDate());
        sb.append(", sourceTransType=");
        sb.append(getSourceTransType());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(100);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.PaymentTransactions");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>epayTransId</column-name><column-value><![CDATA[");
        sb.append(getEpayTransId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transAmount</column-name><column-value><![CDATA[");
        sb.append(getTransAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transValue</column-name><column-value><![CDATA[");
        sb.append(getTransValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transAmotChkDigit</column-name><column-value><![CDATA[");
        sb.append(getTransAmotChkDigit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processorReference</column-name><column-value><![CDATA[");
        sb.append(getProcessorReference());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>channelId</column-name><column-value><![CDATA[");
        sb.append(getChannelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtBankId</column-name><column-value><![CDATA[");
        sb.append(getPmtBankId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtBranchId</column-name><column-value><![CDATA[");
        sb.append(getPmtBranchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>transProcessDate</column-name><column-value><![CDATA[");
        sb.append(getTransProcessDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceId</column-name><column-value><![CDATA[");
        sb.append(getServiceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>appliedDate</column-name><column-value><![CDATA[");
        sb.append(getAppliedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>appliedAmount</column-name><column-value><![CDATA[");
        sb.append(getAppliedAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processStatus</column-name><column-value><![CDATA[");
        sb.append(getProcessStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>notificationNumber</column-name><column-value><![CDATA[");
        sb.append(getNotificationNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>currencyCode</column-name><column-value><![CDATA[");
        sb.append(getCurrencyCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>confirmationNumber</column-name><column-value><![CDATA[");
        sb.append(getConfirmationNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtRecievedDate</column-name><column-value><![CDATA[");
        sb.append(getPmtRecievedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reasonCode</column-name><column-value><![CDATA[");
        sb.append(getReasonCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eventTypeId</column-name><column-value><![CDATA[");
        sb.append(getEventTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtMethodId</column-name><column-value><![CDATA[");
        sb.append(getPmtMethodId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtType</column-name><column-value><![CDATA[");
        sb.append(getPmtType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rpmId</column-name><column-value><![CDATA[");
        sb.append(getRpmId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nativeReasonCode</column-name><column-value><![CDATA[");
        sb.append(getNativeReasonCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>feeId</column-name><column-value><![CDATA[");
        sb.append(getFeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>requestLocation</column-name><column-value><![CDATA[");
        sb.append(getRequestLocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>profileId</column-name><column-value><![CDATA[");
        sb.append(getProfileId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>senderId</column-name><column-value><![CDATA[");
        sb.append(getSenderId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>last4Digits</column-name><column-value><![CDATA[");
        sb.append(getLast4Digits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cardType</column-name><column-value><![CDATA[");
        sb.append(getCardType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>expiryDate</column-name><column-value><![CDATA[");
        sb.append(getExpiryDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sourceTransType</column-name><column-value><![CDATA[");
        sb.append(getSourceTransType());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
