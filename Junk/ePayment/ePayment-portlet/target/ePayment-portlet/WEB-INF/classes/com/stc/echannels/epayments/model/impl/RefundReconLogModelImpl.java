package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.stc.echannels.epayments.model.RefundReconLog;
import com.stc.echannels.epayments.model.RefundReconLogModel;
import com.stc.echannels.epayments.model.RefundReconLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RefundReconLog service. Represents a row in the &quot;REFUND_RECON_LOG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.RefundReconLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RefundReconLogImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see RefundReconLogImpl
 * @see com.stc.echannels.epayments.model.RefundReconLog
 * @see com.stc.echannels.epayments.model.RefundReconLogModel
 * @generated
 */
@JSON(strict = true)
public class RefundReconLogModelImpl extends BaseModelImpl<RefundReconLog>
    implements RefundReconLogModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a refund recon log model instance should use the {@link com.stc.echannels.epayments.model.RefundReconLog} interface instead.
     */
    public static final String TABLE_NAME = "REFUND_RECON_LOG";
    public static final Object[][] TABLE_COLUMNS = {
            { "BATCH_ID", Types.VARCHAR },
            { "SERVICE_ID", Types.BIGINT },
            { "REFUND_ID", Types.VARCHAR },
            { "PMT_BANK_ID", Types.VARCHAR },
            { "PMT_SYSTEM_REFUND_TRANS_ID", Types.VARCHAR },
            { "BANK_REFUND_TRANS_ID", Types.VARCHAR },
            { "EFF_DT", Types.TIMESTAMP },
            { "PROCESS_DATE", Types.TIMESTAMP },
            { "REFUND_AMOUNT", Types.DOUBLE },
            { "REFUND_STATUS_CODE", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table REFUND_RECON_LOG (BATCH_ID VARCHAR(75) not null primary key,SERVICE_ID LONG,REFUND_ID VARCHAR(75) null,PMT_BANK_ID VARCHAR(75) null,PMT_SYSTEM_REFUND_TRANS_ID VARCHAR(75) null,BANK_REFUND_TRANS_ID VARCHAR(75) null,EFF_DT DATE null,PROCESS_DATE DATE null,REFUND_AMOUNT DOUBLE,REFUND_STATUS_CODE VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table REFUND_RECON_LOG";
    public static final String ORDER_BY_JPQL = " ORDER BY refundReconLog.processDate ASC";
    public static final String ORDER_BY_SQL = " ORDER BY REFUND_RECON_LOG.PROCESS_DATE ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.RefundReconLog"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.RefundReconLog"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.RefundReconLog"));
    private static ClassLoader _classLoader = RefundReconLog.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            RefundReconLog.class
        };
    private String _batchId;
    private long _serviceId;
    private String _refundId;
    private String _pmtBankId;
    private String _pmtSystemRefundTransId;
    private String _bankRefundTransId;
    private Date _effDt;
    private Date _processDate;
    private double _refundAmount;
    private String _refundStatusCode;
    private RefundReconLog _escapedModel;

    public RefundReconLogModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static RefundReconLog toModel(RefundReconLogSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        RefundReconLog model = new RefundReconLogImpl();

        model.setBatchId(soapModel.getBatchId());
        model.setServiceId(soapModel.getServiceId());
        model.setRefundId(soapModel.getRefundId());
        model.setPmtBankId(soapModel.getPmtBankId());
        model.setPmtSystemRefundTransId(soapModel.getPmtSystemRefundTransId());
        model.setBankRefundTransId(soapModel.getBankRefundTransId());
        model.setEffDt(soapModel.getEffDt());
        model.setProcessDate(soapModel.getProcessDate());
        model.setRefundAmount(soapModel.getRefundAmount());
        model.setRefundStatusCode(soapModel.getRefundStatusCode());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<RefundReconLog> toModels(RefundReconLogSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<RefundReconLog> models = new ArrayList<RefundReconLog>(soapModels.length);

        for (RefundReconLogSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _batchId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setBatchId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _batchId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return RefundReconLog.class;
    }

    @Override
    public String getModelClassName() {
        return RefundReconLog.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("batchId", getBatchId());
        attributes.put("serviceId", getServiceId());
        attributes.put("refundId", getRefundId());
        attributes.put("pmtBankId", getPmtBankId());
        attributes.put("pmtSystemRefundTransId", getPmtSystemRefundTransId());
        attributes.put("bankRefundTransId", getBankRefundTransId());
        attributes.put("effDt", getEffDt());
        attributes.put("processDate", getProcessDate());
        attributes.put("refundAmount", getRefundAmount());
        attributes.put("refundStatusCode", getRefundStatusCode());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String batchId = (String) attributes.get("batchId");

        if (batchId != null) {
            setBatchId(batchId);
        }

        Long serviceId = (Long) attributes.get("serviceId");

        if (serviceId != null) {
            setServiceId(serviceId);
        }

        String refundId = (String) attributes.get("refundId");

        if (refundId != null) {
            setRefundId(refundId);
        }

        String pmtBankId = (String) attributes.get("pmtBankId");

        if (pmtBankId != null) {
            setPmtBankId(pmtBankId);
        }

        String pmtSystemRefundTransId = (String) attributes.get(
                "pmtSystemRefundTransId");

        if (pmtSystemRefundTransId != null) {
            setPmtSystemRefundTransId(pmtSystemRefundTransId);
        }

        String bankRefundTransId = (String) attributes.get("bankRefundTransId");

        if (bankRefundTransId != null) {
            setBankRefundTransId(bankRefundTransId);
        }

        Date effDt = (Date) attributes.get("effDt");

        if (effDt != null) {
            setEffDt(effDt);
        }

        Date processDate = (Date) attributes.get("processDate");

        if (processDate != null) {
            setProcessDate(processDate);
        }

        Double refundAmount = (Double) attributes.get("refundAmount");

        if (refundAmount != null) {
            setRefundAmount(refundAmount);
        }

        String refundStatusCode = (String) attributes.get("refundStatusCode");

        if (refundStatusCode != null) {
            setRefundStatusCode(refundStatusCode);
        }
    }

    @JSON
    @Override
    public String getBatchId() {
        if (_batchId == null) {
            return StringPool.BLANK;
        } else {
            return _batchId;
        }
    }

    @Override
    public void setBatchId(String batchId) {
        _batchId = batchId;
    }

    @JSON
    @Override
    public long getServiceId() {
        return _serviceId;
    }

    @Override
    public void setServiceId(long serviceId) {
        _serviceId = serviceId;
    }

    @JSON
    @Override
    public String getRefundId() {
        if (_refundId == null) {
            return StringPool.BLANK;
        } else {
            return _refundId;
        }
    }

    @Override
    public void setRefundId(String refundId) {
        _refundId = refundId;
    }

    @JSON
    @Override
    public String getPmtBankId() {
        if (_pmtBankId == null) {
            return StringPool.BLANK;
        } else {
            return _pmtBankId;
        }
    }

    @Override
    public void setPmtBankId(String pmtBankId) {
        _pmtBankId = pmtBankId;
    }

    @JSON
    @Override
    public String getPmtSystemRefundTransId() {
        if (_pmtSystemRefundTransId == null) {
            return StringPool.BLANK;
        } else {
            return _pmtSystemRefundTransId;
        }
    }

    @Override
    public void setPmtSystemRefundTransId(String pmtSystemRefundTransId) {
        _pmtSystemRefundTransId = pmtSystemRefundTransId;
    }

    @JSON
    @Override
    public String getBankRefundTransId() {
        if (_bankRefundTransId == null) {
            return StringPool.BLANK;
        } else {
            return _bankRefundTransId;
        }
    }

    @Override
    public void setBankRefundTransId(String bankRefundTransId) {
        _bankRefundTransId = bankRefundTransId;
    }

    @JSON
    @Override
    public Date getEffDt() {
        return _effDt;
    }

    @Override
    public void setEffDt(Date effDt) {
        _effDt = effDt;
    }

    @JSON
    @Override
    public Date getProcessDate() {
        return _processDate;
    }

    @Override
    public void setProcessDate(Date processDate) {
        _processDate = processDate;
    }

    @JSON
    @Override
    public double getRefundAmount() {
        return _refundAmount;
    }

    @Override
    public void setRefundAmount(double refundAmount) {
        _refundAmount = refundAmount;
    }

    @JSON
    @Override
    public String getRefundStatusCode() {
        if (_refundStatusCode == null) {
            return StringPool.BLANK;
        } else {
            return _refundStatusCode;
        }
    }

    @Override
    public void setRefundStatusCode(String refundStatusCode) {
        _refundStatusCode = refundStatusCode;
    }

    @Override
    public RefundReconLog toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (RefundReconLog) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RefundReconLogImpl refundReconLogImpl = new RefundReconLogImpl();

        refundReconLogImpl.setBatchId(getBatchId());
        refundReconLogImpl.setServiceId(getServiceId());
        refundReconLogImpl.setRefundId(getRefundId());
        refundReconLogImpl.setPmtBankId(getPmtBankId());
        refundReconLogImpl.setPmtSystemRefundTransId(getPmtSystemRefundTransId());
        refundReconLogImpl.setBankRefundTransId(getBankRefundTransId());
        refundReconLogImpl.setEffDt(getEffDt());
        refundReconLogImpl.setProcessDate(getProcessDate());
        refundReconLogImpl.setRefundAmount(getRefundAmount());
        refundReconLogImpl.setRefundStatusCode(getRefundStatusCode());

        refundReconLogImpl.resetOriginalValues();

        return refundReconLogImpl;
    }

    @Override
    public int compareTo(RefundReconLog refundReconLog) {
        int value = 0;

        value = DateUtil.compareTo(getProcessDate(),
                refundReconLog.getProcessDate());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof RefundReconLog)) {
            return false;
        }

        RefundReconLog refundReconLog = (RefundReconLog) obj;

        String primaryKey = refundReconLog.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<RefundReconLog> toCacheModel() {
        RefundReconLogCacheModel refundReconLogCacheModel = new RefundReconLogCacheModel();

        refundReconLogCacheModel.batchId = getBatchId();

        String batchId = refundReconLogCacheModel.batchId;

        if ((batchId != null) && (batchId.length() == 0)) {
            refundReconLogCacheModel.batchId = null;
        }

        refundReconLogCacheModel.serviceId = getServiceId();

        refundReconLogCacheModel.refundId = getRefundId();

        String refundId = refundReconLogCacheModel.refundId;

        if ((refundId != null) && (refundId.length() == 0)) {
            refundReconLogCacheModel.refundId = null;
        }

        refundReconLogCacheModel.pmtBankId = getPmtBankId();

        String pmtBankId = refundReconLogCacheModel.pmtBankId;

        if ((pmtBankId != null) && (pmtBankId.length() == 0)) {
            refundReconLogCacheModel.pmtBankId = null;
        }

        refundReconLogCacheModel.pmtSystemRefundTransId = getPmtSystemRefundTransId();

        String pmtSystemRefundTransId = refundReconLogCacheModel.pmtSystemRefundTransId;

        if ((pmtSystemRefundTransId != null) &&
                (pmtSystemRefundTransId.length() == 0)) {
            refundReconLogCacheModel.pmtSystemRefundTransId = null;
        }

        refundReconLogCacheModel.bankRefundTransId = getBankRefundTransId();

        String bankRefundTransId = refundReconLogCacheModel.bankRefundTransId;

        if ((bankRefundTransId != null) && (bankRefundTransId.length() == 0)) {
            refundReconLogCacheModel.bankRefundTransId = null;
        }

        Date effDt = getEffDt();

        if (effDt != null) {
            refundReconLogCacheModel.effDt = effDt.getTime();
        } else {
            refundReconLogCacheModel.effDt = Long.MIN_VALUE;
        }

        Date processDate = getProcessDate();

        if (processDate != null) {
            refundReconLogCacheModel.processDate = processDate.getTime();
        } else {
            refundReconLogCacheModel.processDate = Long.MIN_VALUE;
        }

        refundReconLogCacheModel.refundAmount = getRefundAmount();

        refundReconLogCacheModel.refundStatusCode = getRefundStatusCode();

        String refundStatusCode = refundReconLogCacheModel.refundStatusCode;

        if ((refundStatusCode != null) && (refundStatusCode.length() == 0)) {
            refundReconLogCacheModel.refundStatusCode = null;
        }

        return refundReconLogCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{batchId=");
        sb.append(getBatchId());
        sb.append(", serviceId=");
        sb.append(getServiceId());
        sb.append(", refundId=");
        sb.append(getRefundId());
        sb.append(", pmtBankId=");
        sb.append(getPmtBankId());
        sb.append(", pmtSystemRefundTransId=");
        sb.append(getPmtSystemRefundTransId());
        sb.append(", bankRefundTransId=");
        sb.append(getBankRefundTransId());
        sb.append(", effDt=");
        sb.append(getEffDt());
        sb.append(", processDate=");
        sb.append(getProcessDate());
        sb.append(", refundAmount=");
        sb.append(getRefundAmount());
        sb.append(", refundStatusCode=");
        sb.append(getRefundStatusCode());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.RefundReconLog");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>batchId</column-name><column-value><![CDATA[");
        sb.append(getBatchId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>serviceId</column-name><column-value><![CDATA[");
        sb.append(getServiceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>refundId</column-name><column-value><![CDATA[");
        sb.append(getRefundId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtBankId</column-name><column-value><![CDATA[");
        sb.append(getPmtBankId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pmtSystemRefundTransId</column-name><column-value><![CDATA[");
        sb.append(getPmtSystemRefundTransId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bankRefundTransId</column-name><column-value><![CDATA[");
        sb.append(getBankRefundTransId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>effDt</column-name><column-value><![CDATA[");
        sb.append(getEffDt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>processDate</column-name><column-value><![CDATA[");
        sb.append(getProcessDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>refundAmount</column-name><column-value><![CDATA[");
        sb.append(getRefundAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>refundStatusCode</column-name><column-value><![CDATA[");
        sb.append(getRefundStatusCode());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
