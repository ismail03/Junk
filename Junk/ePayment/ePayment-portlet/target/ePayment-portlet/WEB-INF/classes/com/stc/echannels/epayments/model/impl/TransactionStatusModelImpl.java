package com.stc.echannels.epayments.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.stc.echannels.epayments.model.TransactionStatus;
import com.stc.echannels.epayments.model.TransactionStatusModel;
import com.stc.echannels.epayments.model.TransactionStatusSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TransactionStatus service. Represents a row in the &quot;TRANSACTION_STATUS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.stc.echannels.epayments.model.TransactionStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TransactionStatusImpl}.
 * </p>
 *
 * @author ahmed_fadlus
 * @see TransactionStatusImpl
 * @see com.stc.echannels.epayments.model.TransactionStatus
 * @see com.stc.echannels.epayments.model.TransactionStatusModel
 * @generated
 */
@JSON(strict = true)
public class TransactionStatusModelImpl extends BaseModelImpl<TransactionStatus>
    implements TransactionStatusModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a transaction status model instance should use the {@link com.stc.echannels.epayments.model.TransactionStatus} interface instead.
     */
    public static final String TABLE_NAME = "TRANSACTION_STATUS";
    public static final Object[][] TABLE_COLUMNS = {
            { "ID", Types.BIGINT },
            { "DESCRIPTION", Types.VARCHAR },
            { "DESCRIPTIVE_NAME_EN", Types.VARCHAR },
            { "DESCRIPTIVE_NAME_AR", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table TRANSACTION_STATUS (ID LONG not null primary key,DESCRIPTION VARCHAR(75) null,DESCRIPTIVE_NAME_EN VARCHAR(75) null,DESCRIPTIVE_NAME_AR VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table TRANSACTION_STATUS";
    public static final String ORDER_BY_JPQL = " ORDER BY transactionStatus.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY TRANSACTION_STATUS.ID ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "anotherTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.stc.echannels.epayments.model.TransactionStatus"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.stc.echannels.epayments.model.TransactionStatus"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.stc.echannels.epayments.model.TransactionStatus"));
    private static ClassLoader _classLoader = TransactionStatus.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            TransactionStatus.class
        };
    private long _id;
    private String _description;
    private String _descriptiveNameEn;
    private String _descriptiveNameAr;
    private TransactionStatus _escapedModel;

    public TransactionStatusModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static TransactionStatus toModel(TransactionStatusSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        TransactionStatus model = new TransactionStatusImpl();

        model.setId(soapModel.getId());
        model.setDescription(soapModel.getDescription());
        model.setDescriptiveNameEn(soapModel.getDescriptiveNameEn());
        model.setDescriptiveNameAr(soapModel.getDescriptiveNameAr());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<TransactionStatus> toModels(
        TransactionStatusSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<TransactionStatus> models = new ArrayList<TransactionStatus>(soapModels.length);

        for (TransactionStatusSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return TransactionStatus.class;
    }

    @Override
    public String getModelClassName() {
        return TransactionStatus.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("description", getDescription());
        attributes.put("descriptiveNameEn", getDescriptiveNameEn());
        attributes.put("descriptiveNameAr", getDescriptiveNameAr());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String descriptiveNameEn = (String) attributes.get("descriptiveNameEn");

        if (descriptiveNameEn != null) {
            setDescriptiveNameEn(descriptiveNameEn);
        }

        String descriptiveNameAr = (String) attributes.get("descriptiveNameAr");

        if (descriptiveNameAr != null) {
            setDescriptiveNameAr(descriptiveNameAr);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getDescriptiveNameEn() {
        if (_descriptiveNameEn == null) {
            return StringPool.BLANK;
        } else {
            return _descriptiveNameEn;
        }
    }

    @Override
    public void setDescriptiveNameEn(String descriptiveNameEn) {
        _descriptiveNameEn = descriptiveNameEn;
    }

    @JSON
    @Override
    public String getDescriptiveNameAr() {
        if (_descriptiveNameAr == null) {
            return StringPool.BLANK;
        } else {
            return _descriptiveNameAr;
        }
    }

    @Override
    public void setDescriptiveNameAr(String descriptiveNameAr) {
        _descriptiveNameAr = descriptiveNameAr;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            TransactionStatus.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public TransactionStatus toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (TransactionStatus) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TransactionStatusImpl transactionStatusImpl = new TransactionStatusImpl();

        transactionStatusImpl.setId(getId());
        transactionStatusImpl.setDescription(getDescription());
        transactionStatusImpl.setDescriptiveNameEn(getDescriptiveNameEn());
        transactionStatusImpl.setDescriptiveNameAr(getDescriptiveNameAr());

        transactionStatusImpl.resetOriginalValues();

        return transactionStatusImpl;
    }

    @Override
    public int compareTo(TransactionStatus transactionStatus) {
        int value = 0;

        if (getId() < transactionStatus.getId()) {
            value = -1;
        } else if (getId() > transactionStatus.getId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof TransactionStatus)) {
            return false;
        }

        TransactionStatus transactionStatus = (TransactionStatus) obj;

        long primaryKey = transactionStatus.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<TransactionStatus> toCacheModel() {
        TransactionStatusCacheModel transactionStatusCacheModel = new TransactionStatusCacheModel();

        transactionStatusCacheModel.id = getId();

        transactionStatusCacheModel.description = getDescription();

        String description = transactionStatusCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            transactionStatusCacheModel.description = null;
        }

        transactionStatusCacheModel.descriptiveNameEn = getDescriptiveNameEn();

        String descriptiveNameEn = transactionStatusCacheModel.descriptiveNameEn;

        if ((descriptiveNameEn != null) && (descriptiveNameEn.length() == 0)) {
            transactionStatusCacheModel.descriptiveNameEn = null;
        }

        transactionStatusCacheModel.descriptiveNameAr = getDescriptiveNameAr();

        String descriptiveNameAr = transactionStatusCacheModel.descriptiveNameAr;

        if ((descriptiveNameAr != null) && (descriptiveNameAr.length() == 0)) {
            transactionStatusCacheModel.descriptiveNameAr = null;
        }

        return transactionStatusCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", descriptiveNameEn=");
        sb.append(getDescriptiveNameEn());
        sb.append(", descriptiveNameAr=");
        sb.append(getDescriptiveNameAr());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.stc.echannels.epayments.model.TransactionStatus");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptiveNameEn</column-name><column-value><![CDATA[");
        sb.append(getDescriptiveNameEn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptiveNameAr</column-name><column-value><![CDATA[");
        sb.append(getDescriptiveNameAr());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
